"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
const starkex_eth_1 = require("@dydxprotocol/starkex-eth");
const starkex_lib_1 = require("@dydxprotocol/starkex-lib");
const lodash_1 = __importDefault(require("lodash"));
const request_helpers_1 = require("../helpers/request-helpers");
const axios_1 = require("../lib/axios");
const db_1 = require("../lib/db");
// TODO: Figure out if we can get rid of this.
const METHOD_ENUM_MAP = {
    [axios_1.RequestMethod.DELETE]: starkex_lib_1.ApiMethod.DELETE,
    [axios_1.RequestMethod.GET]: starkex_lib_1.ApiMethod.GET,
    [axios_1.RequestMethod.POST]: starkex_lib_1.ApiMethod.POST,
    [axios_1.RequestMethod.PUT]: starkex_lib_1.ApiMethod.PUT,
};
const collateralTokenDecimals = 6;
class Private {
    constructor({ host, apiKeyCredentials, starkPrivateKey, networkId, clock, }) {
        this.host = host;
        this.apiKeyCredentials = apiKeyCredentials;
        this.networkId = networkId;
        this.starkLib = new starkex_eth_1.StarkwareLib({}, networkId);
        if (starkPrivateKey) {
            this.starkKeyPair = (0, starkex_lib_1.asSimpleKeyPair)((0, starkex_lib_1.asEcKeyPair)(starkPrivateKey));
        }
        this.clock = clock;
    }
    // ============ Request Helpers ============
    async request(method, endpoint, data) {
        const requestPath = `/v3/${endpoint}`;
        const isoTimestamp = this.clock.getAdjustedIsoString();
        const headers = {
            'DYDX-SIGNATURE': this.sign({
                requestPath,
                method,
                isoTimestamp,
                data,
            }),
            'DYDX-API-KEY': this.apiKeyCredentials.key,
            'DYDX-TIMESTAMP': isoTimestamp,
            'DYDX-PASSPHRASE': this.apiKeyCredentials.passphrase,
        };
        return (0, axios_1.axiosRequest)({
            url: `${this.host}${requestPath}`,
            method,
            data,
            headers,
        });
    }
    async _get(endpoint, params) {
        return this.request(axios_1.RequestMethod.GET, (0, request_helpers_1.generateQueryPath)(endpoint, params));
    }
    async post(endpoint, data) {
        return this.request(axios_1.RequestMethod.POST, endpoint, data);
    }
    async put(endpoint, data) {
        return this.request(axios_1.RequestMethod.PUT, endpoint, data);
    }
    async delete(endpoint, params) {
        return this.request(axios_1.RequestMethod.DELETE, (0, request_helpers_1.generateQueryPath)(endpoint, params));
    }
    // ============ Requests ============
    async get(endpoint, params) {
        return this._get(endpoint, params);
    }
    /**
     * @description get a signature for the ethereumAddress if registered
     */
    async getRegistration(genericParams = {}) {
        return this._get('registration', {
            ...genericParams,
        });
    }
    /**
     * @description get the user associated with the ethereumAddress
     */
    async getUser(genericParams = {}) {
        return this._get('users', {
            ...genericParams,
        });
    }
    /**
     * @description update information for the user
     *
     * @params {
     * @userData specifiying information about the user
     * @email associated with the user
     * @username for the user
     * @isSharingUsername if the user wants their username publicly shared
     * @isSharingAddress if the user wants their ethereumAddress publicly shared
     * @country for the user (ISO 3166-1 Alpha-2 Compliant)
     * @languageCode for the user (ISO 639-1 Compliant, including 'zh-CN')
     * }
     */
    async updateUser({ userData, email, username, isSharingUsername, isSharingAddress, country, languageCode, }) {
        return this.put('users', {
            email,
            username,
            isSharingUsername,
            isSharingAddress,
            userData: JSON.stringify(userData),
            country,
            languageCode,
        });
    }
    /**
     * @description create an account for an ethereumAddress
     *
     * @param starkKey for the account that will be used as the public key in starkwareEx-Lib requests
     * going forward for this account.
     * @param starkKeyYCoordinate for the account that will be used as the Y coordinate for the public
     * key in starkwareEx-Lib requests going forward for this account.
     */
    async createAccount(starkKey, starkKeyYCoordinate) {
        return this.post('accounts', {
            starkKey,
            starkKeyYCoordinate,
        });
    }
    /**
     * @description get account associated with an ethereumAddress and accountNumber 0
     *
     * @param ethereumAddress the account is associated with
     */
    async getAccount(ethereumAddress, genericParams = {}) {
        return this._get(`accounts/${(0, db_1.getAccountId)({ address: ethereumAddress })}`, { ...genericParams });
    }
    /**
     * @description get all accounts associated with an ethereumAddress
     */
    async getAccounts(genericParams = {}) {
        return this._get('accounts', { ...genericParams });
    }
    /**
     * @description get leaderboard pnl for period
     *
     * @param period the period of pnls to retrieve
     */
    async getAccountLeaderboardPnl(period, params, genericParams = {}) {
        return this._get(`accounts/leaderboard-pnl/${period}`, {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get historical leaderboard pnls for period
     *
     * @param period the period of pnls to retrieve
     */
    async getAccountHistoricalLeaderboardPnl(period, params, genericParams = {}) {
        return this._get(`accounts/historical-leaderboard-pnls/${period}`, {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get all positions for an account, meeting query parameters
     *
     * @params {
     * @market the positions are for
     * @status of the positions
     * @limit to the number of positions returned
     * @createdBeforeOrAt latest the positions could have been created
     * }
     */
    async getPositions(params, genericParams = {}) {
        return this._get('positions', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get orders for a user by a set of query parameters
     *
     * @params {
     * @market the orders are for
     * @status the orders have
     * @side of the book the orders are on
     * @type of order
     * @limit to the number of orders returned
     * @createdBeforeOrAt sets the time of the last fill that will be received
     * @returnLatestOrders returns the latest orders instead of the oldest and the order is
     * from most recent to least recent (up to limit)
     * }
     */
    async getOrders(params = {}, genericParams = {}) {
        return this._get('orders', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get active orders (PENDING, OPEN, UNTRIGGERED) for a user by a set of query
     * parameters - if id is included then side is required
     *
     * @params {
     * @market the orders are for
     * @side of the book the orders are on
     * @id of the order
     * }
     */
    async getActiveOrders(market, side, id, genericParams = {}) {
        return this._get('active-orders', {
            market,
            side,
            id,
            ...genericParams,
        });
    }
    /**
     * @description get an order by a unique id
     *
     * @param orderId of the order
     */
    async getOrderById(orderId, genericParams = {}) {
        return this._get(`orders/${orderId}`, { ...genericParams });
    }
    /**
     * @description get an order by a clientId
     *
     * @param clientId of the order
     */
    async getOrderByClientId(clientId, genericParams = {}) {
        return this._get(`orders/client/${clientId}`, { ...genericParams });
    }
    /**
     *@description place a new order
     *
     * @params {
     * @market of the order
     * @side of the order
     * @type of the order
     * @timeInForce of the order
     * @postOnly of the order
     * @size of the order
     * @price of the order
     * @limitFee of the order
     * @expiration of the order
     * @reduceOnly whether the order is reduce-only (optional)
     * @cancelId if the order is replacing an existing one
     * @triggerPrice of the order if the order is a triggerable order
     * @trailingPercent of the order if the order is a trailing stop order
     * }
     * @param positionId associated with the order
     */
    async createOrder(params, positionId, genericParams = {}) {
        const clientId = params.clientId || (0, request_helpers_1.generateRandomClientId)();
        let signature = params.signature;
        if (!signature) {
            if (!this.starkKeyPair) {
                throw new Error('Order is not signed and client was not initialized with starkPrivateKey');
            }
            const orderToSign = {
                humanSize: params.size,
                humanPrice: params.price,
                limitFee: params.limitFee,
                market: params.market,
                side: params.side,
                expirationIsoTimestamp: params.expiration,
                clientId,
                positionId,
            };
            const starkOrder = starkex_lib_1.SignableOrder.fromOrder(orderToSign, this.networkId);
            signature = await starkOrder.sign(this.starkKeyPair);
        }
        const order = {
            ...params,
            clientId,
            signature,
        };
        return this.post('orders', {
            ...order,
            ...genericParams,
        });
    }
    /**
     * @description cancel a specific order for a user by the order's unique id
     *
     * @param orderId of the order being canceled
     */
    async cancelOrder(orderId) {
        return this.delete(`orders/${orderId}`, {});
    }
    /**
     * @description cancel all orders for a user for a specific market
     *
     * @param market of the orders being canceled
     */
    async cancelAllOrders(market) {
        const params = market ? { market } : {};
        return this.delete('orders', params);
    }
    /**
     * @description cancel active orders (PENDING, OPEN, UNTRIGGERED) for a user by a set of query
     * parameters - if id is included then side is required
     *
     * @params {
     * @market the orders are for
     * @side of the book the orders are on
     * @id of the order
     * }
     */
    async cancelActiveOrders(market, side, id, genericParams = {}) {
        return this.delete('active-orders', {
            market,
            side,
            id,
            ...genericParams,
        });
    }
    /**
     *@description get fills for a user by a set of query parameters
     *
     * @params {
     * @market the fills are for
     * @orderId associated with the fills
     * @limit to the number of fills returned
     * @createdBeforeOrAt sets the time of the last fill that will be received
     * }
     */
    async getFills(params, genericParams = {}) {
        return this._get('fills', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get transfers for a user by a set of query parameters
     *
     * @params {
     * @type of transfer
     * @limit to the number of transfers returned
     * @createdBeforeOrAt sets the time of the last transfer that will be received
     * }
     */
    async getTransfers(params = {}, genericParams = {}) {
        return this._get('transfers', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description post a new withdrawal
     *
     * @params {
     * @amount specifies the size of the withdrawal
     * @asset specifies the asset being withdrawn
     * @clientId specifies the clientId for the address
     * }
     * @param positionId specifies the associated position for the transfer
     */
    async createWithdrawal(params, positionId) {
        const clientId = params.clientId || (0, request_helpers_1.generateRandomClientId)();
        let signature = params.signature;
        if (!signature) {
            if (!this.starkKeyPair) {
                throw new Error('Withdrawal is not signed and client was not initialized with starkPrivateKey');
            }
            const withdrawalToSign = {
                humanAmount: params.amount,
                expirationIsoTimestamp: params.expiration,
                clientId,
                positionId,
            };
            const starkWithdrawal = starkex_lib_1.SignableWithdrawal.fromWithdrawal(withdrawalToSign, this.networkId);
            signature = await starkWithdrawal.sign(this.starkKeyPair);
        }
        const withdrawal = {
            ...params,
            clientId,
            signature,
        };
        return this.post('withdrawals', withdrawal);
    }
    /**
     * @description post a new fast-withdrawal
     *
     * @params {
     * @creditAmount specifies the size of the withdrawal
     * @debitAmount specifies the amount to be debited
     * @creditAsset specifies the asset being withdrawn
     * @toAddress is the address being withdrawn to
     * @lpPositionId is the LP positionId for the fast withdrawal
     * @clientId specifies the clientId for the address
     * @signature starkware specific signature for fast-withdrawal
     * }
     */
    async createFastWithdrawal({ lpStarkKey, ...params }, positionId) {
        const clientId = params.clientId || (0, request_helpers_1.generateRandomClientId)();
        let signature = params.signature;
        if (!signature) {
            if (!this.starkKeyPair) {
                throw new Error('Fast withdrawal is not signed and client was not initialized with starkPrivateKey');
            }
            const fact = this.starkLib.factRegistry.getTransferErc20Fact({
                recipient: params.toAddress,
                tokenAddress: this.starkLib.collateralToken.getAddress(),
                tokenDecimals: collateralTokenDecimals,
                humanAmount: params.creditAmount,
                salt: (0, starkex_lib_1.nonceFromClientId)(clientId),
            });
            const transferToSign = {
                senderPositionId: positionId,
                receiverPositionId: params.lpPositionId,
                receiverPublicKey: lpStarkKey,
                factRegistryAddress: this.starkLib.factRegistry.getAddress(),
                fact,
                humanAmount: params.debitAmount,
                clientId,
                expirationIsoTimestamp: params.expiration,
            };
            const starkConditionalTransfer = starkex_lib_1.SignableConditionalTransfer.fromTransfer(transferToSign, this.networkId);
            signature = await starkConditionalTransfer.sign(this.starkKeyPair);
        }
        const fastWithdrawal = {
            ...params,
            clientId,
            signature,
        };
        return this.post('fast-withdrawals', fastWithdrawal);
    }
    /**
     * @description post a new transfer
     *
     * @params {
     * @amount specifies the size of the transfer
     * @receiverAccountId specifies the receiver account id
     * @receiverPublicKey specifies the receiver public key
     * @receiverPositionId specifies the receiver position id
     * @clientId specifies the clientId for the address
     * @signature starkware specific signature for the transfer
     * }
     * @param positionId specifies the associated position for the transfer
     */
    async createTransfer(params, positionId) {
        const clientId = params.clientId || (0, request_helpers_1.generateRandomClientId)();
        let signature = params.signature;
        if (!signature) {
            if (!this.starkKeyPair) {
                throw new Error('Transfer is not signed and client was not initialized with starkPrivateKey');
            }
            const transferToSign = {
                humanAmount: params.amount,
                expirationIsoTimestamp: params.expiration,
                receiverPositionId: params.receiverPositionId,
                senderPositionId: positionId,
                receiverPublicKey: params.receiverPublicKey,
                clientId,
            };
            const starkTransfer = starkex_lib_1.SignableTransfer.fromTransfer(transferToSign, this.networkId);
            signature = await starkTransfer.sign(this.starkKeyPair);
        }
        const transfer = {
            amount: params.amount,
            receiverAccountId: params.receiverAccountId,
            clientId,
            signature,
            expiration: params.expiration,
        };
        return this.post('transfers', transfer);
    }
    /**
     * @description get a user's funding payments by a set of query parameters
     *
     * @params {
     * @market the funding payments are for
     * @limit to the number of funding payments returned
     * @effectiveBeforeOrAt sets the latest funding payment received
     * }
     */
    async getFundingPayments(params, genericParams = {}) {
        return this._get('funding', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get historical pnl ticks for an account between certain times
     *
     * @params {
     * @createdBeforeOrAt latest historical pnl tick being returned
     * @createdOnOrAfter earliest historical pnl tick being returned
     * }
     */
    getHistoricalPnl(params, genericParams = {}) {
        return this._get('historical-pnl', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get trading rewards for a user for a given epoch
     *
     * @params {
     * @epoch to request rewards data for (optional)
     * }
     */
    getTradingRewards(params, genericParams = {}) {
        return this._get('rewards/weight', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get liquidity provider rewards for a user for a given epoch. use for epochs 13+.
     *
     * @params {
     *   @epoch to request rewards data for (optional)
     * }
     *
     */
    getLiquidityProviderRewardsV2(params, genericParams = {}) {
        return this._get('rewards/liquidity-provider', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description (deprecated) get liquidity provider rewards for a user for a given epoch. use for
     * epochs 0-12.
     *
     * @params {
     *   @epoch to request rewards data for (optional)
     * }
     *
     */
    getLiquidityProviderRewards(params, genericParams = {}) {
        return this._get('rewards/liquidity', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get retroactive mining rewards for a user for a given epoch
     *
     */
    getRetroactiveMiningRewards(genericParams = {}) {
        return this._get('rewards/retroactive-mining', {
            ...genericParams,
        });
    }
    /**
     * @description get the key ids associated with an ethereumAddress
     *
     */
    async getApiKeys(genericParams = {}) {
        return this._get('api-keys', { ...genericParams });
    }
    /**
     * @description send verification email to email specified by User
     */
    async sendVerificationEmail() {
        return this.put('emails/send-verification-email', {});
    }
    /**
     * @description requests tokens on dYdX's staging server.
     * NOTE: this will not work on Mainnet/Production.
     */
    async requestTestnetTokens() {
        // Goerli
        if (this.networkId !== 5) {
            throw new Error('Network is not Goerli');
        }
        return this.post('testnet/tokens', {});
    }
    /**
     * @description get ethereum address restrictions on the dYdX protocol.
     */
    async getRestrictions(genericParams = {}) {
        return this._get('restrictions', {
            ...genericParams,
        });
    }
    /**
     * @description comply to dYdX terms of service after a first offense.
     */
    async postRestrictionsCompliance({ residenceCountry, tradingCountry, }, genericParams = {}) {
        return this.post('restrictions/compliance', {
            residenceCountry,
            tradingCountry,
            ...genericParams,
        });
    }
    /**
     * @description get private profile information
     */
    async getProfilePrivate(genericParams = {}) {
        return this._get('profile/private', {
            ...genericParams,
        });
    }
    /**
     * @description get information on active linked users
     */
    async getUserLinks(genericParams = {}) {
        return this._get('users/links', {
            ...genericParams,
        });
    }
    /**
     * @description send a link request action
     */
    async sendLinkRequest(params, genericParams = {}) {
        return this.post('users/links', {
            ...params,
            ...genericParams,
        });
    }
    /**
     * @description get information on pending linked user requests
     */
    async getUserPendingLinkRequests(genericParams = {}) {
        return this._get('users/links/requests', {
            ...genericParams,
        });
    }
    /**
     * @description get a token to send to the Sumsub liveness verification widget
     */
    async postLivenessTokens() {
        return this.post('users/liveness/tokens', {});
    }
    // ============ Signing ============
    sign({ requestPath, method, isoTimestamp, data, }) {
        const messageString = (isoTimestamp +
            METHOD_ENUM_MAP[method] +
            requestPath +
            (lodash_1.default.isEmpty(data) ? '' : JSON.stringify(data)));
        return crypto_1.default.createHmac('sha256', Buffer.from(this.apiKeyCredentials.secret, 'base64')).update(messageString).digest('base64');
    }
}
exports.default = Private;
//# sourceMappingURL=data:application/json;base64,