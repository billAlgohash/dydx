"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../src/index");
const types_1 = require("../src/types");
const DummyProvider_1 = require("./helpers/DummyProvider");
const dummyProvider = new DummyProvider_1.DummyProvider();
let starkwareLib;
const blockHash = '0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb';
const blockNumber = 123456;
const transactionHash = '0x1234567890123456789012345678901234567890123456789012345678901234';
const transactionIndex = 123;
const defaultLog = {
    transactionHash,
    transactionIndex,
    blockHash,
    blockNumber,
};
describe('Logs', () => {
    beforeAll(() => {
        starkwareLib = new index_1.StarkwareLib(dummyProvider, types_1.Networks.GOERLI);
    });
    it('Successfully parses transfer logs', () => {
        const transferLog = {
            ...defaultLog,
            logIndex: 1,
            address: starkwareLib.contracts.collateralToken.options.address,
            data: '0x000000000000000000000000000000000000000000000000000000e8d4a51000',
            topics: [
                '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
                '0x00000000000000000000000057d8493313acbfb4f788e8d74e36ea90118435aa',
                '0x00000000000000000000000080243abb88801c93d91814fbd621a68bbaa769f4',
            ],
        };
        const logs = starkwareLib.logs.parseLogs({
            logs: [transferLog],
        });
        expect(logs).toEqual([
            {
                ...transferLog,
                name: 'Transfer',
                args: {
                    from: '0x57D8493313acBFb4F788e8D74e36EA90118435aA',
                    to: '0x80243ABB88801c93d91814FbD621A68bbaA769F4',
                    value: '1000000000000',
                },
            },
        ]);
    });
    it('Ignores non-related logs', () => {
        const txResult = {
            logs: [
                {
                    address: starkwareLib.contracts.starkwarePerpetual.options.address,
                    blockHash: '0x81441018c1131afd6f7ceec2077257f4ecfc3325d56b375bf370008d17a20d65',
                    blockNumber: 7492404,
                    data: '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
                    logIndex: 119,
                    removed: false,
                    topics: [
                        '0x06724742ccc8c330a39a641ef12a0b419bd09248360680bb38159b0a8c2635d6',
                        '0x0000000000000000000000006e86dc68723d9811f67d9f6acfec6ec9d3818527',
                    ],
                    transactionHash: '0xfbb9bc794809a190e7a18278181128d53ed41cec7bf34667e7052edfbff8ad69',
                    transactionIndex: 152,
                    transactionLogIndex: '0x0',
                    type: 'mined',
                    id: 'log_21ca9c63',
                }
            ],
        };
        const logs = starkwareLib.logs.parseLogs(txResult);
        expect(logs.length).toEqual(0);
        expect(logs).toEqual([]);
    });
    it('Parses boolean values correctly', () => {
        const hardTradeLog = {
            ...defaultLog,
            logIndex: 1,
            address: starkwareLib.contracts.starkwarePerpetual.options.address,
            data: '0x000000000000000000000000000000000000000000000000000000000000303900000000000000000000000000000000000000000000000000000000000087070000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000007d000000000000000000000000000000000000000000000000000000000000012c00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000005',
            topics: [
                '0x79acb9227c98b68d7628d2c99a7719926eff77e8c2275f6ffe7cf255b32772be',
            ],
        };
        const logs = starkwareLib.logs.parseLogs({
            logs: [hardTradeLog],
        });
        expect(logs).toEqual([
            {
                ...hardTradeLog,
                name: 'LogForcedTradeRequest',
                args: {
                    aIsBuyingSynthetic: true,
                    amountCollateral: '125',
                    amountSynthetic: '300',
                    collateralAssetId: '0',
                    nonce: '5',
                    starkKeyA: '12345',
                    starkKeyB: '34567',
                    syntheticAssetId: '1',
                    vaultIdA: '1',
                    vaultIdB: '2',
                },
            },
        ]);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9ncy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vX190ZXN0c19fL0xvZ3MudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLHdDQUE0QztBQUM1Qyx3Q0FBd0M7QUFDeEMsMkRBQXdEO0FBRXhELE1BQU0sYUFBYSxHQUFHLElBQUksNkJBQWEsRUFBeUIsQ0FBQztBQUNqRSxJQUFJLFlBQTBCLENBQUM7QUFFL0IsTUFBTSxTQUFTLEdBQUcsb0VBQW9FLENBQUM7QUFDdkYsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDO0FBQzNCLE1BQU0sZUFBZSxHQUFHLG9FQUFvRSxDQUFDO0FBQzdGLE1BQU0sZ0JBQWdCLEdBQUcsR0FBRyxDQUFDO0FBQzdCLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLGVBQWU7SUFDZixnQkFBZ0I7SUFDaEIsU0FBUztJQUNULFdBQVc7Q0FDWixDQUFDO0FBRUYsUUFBUSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7SUFFcEIsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLFlBQVksR0FBRyxJQUFJLG9CQUFZLENBQUMsYUFBYSxFQUFFLGdCQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFO1FBQzNDLE1BQU0sV0FBVyxHQUFHO1lBQ2xCLEdBQUcsVUFBVTtZQUNiLFFBQVEsRUFBRSxDQUFDO1lBQ1gsT0FBTyxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQy9ELElBQUksRUFBRSxvRUFBb0U7WUFDMUUsTUFBTSxFQUFFO2dCQUNOLG9FQUFvRTtnQkFDcEUsb0VBQW9FO2dCQUNwRSxvRUFBb0U7YUFDckU7U0FDRixDQUFDO1FBQ0YsTUFBTSxJQUFJLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDdkMsSUFBSSxFQUFFLENBQUMsV0FB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