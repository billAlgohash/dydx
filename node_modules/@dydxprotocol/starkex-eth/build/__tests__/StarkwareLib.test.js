"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_1 = __importDefault(require("web3"));
const usdc_abi_json_1 = __importDefault(require("../src/contracts/usdc-abi.json"));
const index_1 = require("../src/index");
const types_1 = require("../src/types");
const DummyProvider_1 = require("./helpers/DummyProvider");
describe('StarwareLib#initiate', () => {
    const dummyProvider = new DummyProvider_1.DummyProvider();
    it('Successfully initiates StarkwareLib on Goerli', async () => {
        const starkwareLib = new index_1.StarkwareLib(dummyProvider, types_1.Networks.GOERLI);
        expect(starkwareLib.collateralToken).toBeTruthy();
        expect(starkwareLib.contracts).toBeTruthy();
        expect(starkwareLib.exchange).toBeTruthy();
        expect(starkwareLib.factRegistry).toBeTruthy();
        expect(starkwareLib.logs).toBeTruthy();
        expect(starkwareLib.mintableToken).toBeTruthy();
        try {
            const realProvider = new web3_1.default.providers.HttpProvider(process.env.ETHEREUM_NODE_RPC_URL, { timeout: 10000 });
            const real = new index_1.StarkwareLib(realProvider, types_1.Networks.GOERLI);
            const account = real.web3.eth.accounts.privateKeyToAccount(process.env.PRIVATE_KEY);
            real.web3.eth.accounts.wallet.add(account);
            real.web3.eth.defaultAccount = account.address;
            await real.exchange.setERC20Allowance({
                tokenAddress: usdc_abi_json_1.default.networks[5].address,
                address: '0x029bB89d64695D6A461eEbC1Aab4a4C8657a3f22',
                amount: 100,
            }, { from: account.address });
            const result = await real.exchange.getERC20Allowance({
                ownerAddress: account.address,
                tokenAddress: usdc_abi_json_1.default.networks[5].address,
                spenderAddress: '0x029bB89d64695D6A461eEbC1Aab4a4C8657a3f22',
                decimals: 8,
            });
            expect(result).toEqual('0.000001');
        }
        catch (error) {
            // eslint-disable-next-line no-console
            console.error(error);
        }
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3Rhcmt3YXJlTGliLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9fX3Rlc3RzX18vU3Rhcmt3YXJlTGliLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnREFBd0I7QUFHeEIsbUZBQXFEO0FBQ3JELHdDQUE0QztBQUM1Qyx3Q0FBd0M7QUFDeEMsMkRBQXdEO0FBRXhELFFBQVEsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsTUFBTSxhQUFhLEdBQUcsSUFBSSw2QkFBYSxFQUF5QixDQUFDO0lBRWpFLEVBQUUsQ0FBQywrQ0FBK0MsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM3RCxNQUFNLFlBQVksR0FBRyxJQUFJLG9CQUFZLENBQUMsYUFBYSxFQUFFLGdCQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEUsTUFBTSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsRCxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzVDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDM0MsTUFBTSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMvQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFaEQsSUFBSTtZQUNGLE1BQU0sWUFBWSxHQUFHLElBQUksY0FBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQStCLEVBQzNDLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUNuQixDQUFDO1lBRUYsTUFBTSxJQUFJLEdBQUcsSUFBSSxvQkFBWSxDQUFDLFlBQVksRUFBRSxnQkFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQXFCLENBQUMsQ0FBQztZQUM5RixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztZQUUvQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3BDLFlBQVksRUFBRSx1QkFBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO2dCQUN6QyxPQUFPLEVBQUUsNENBQTRDO2dCQUNyRCxNQUFNLEVBQUUsR0FBRzthQUNaLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFFOUIsTUFBTSxNQUFNLEdBQVcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDO2dCQUMzRCxZQUFZLEVBQUUsT0FBTyxDQUFDLE9BQU87Z0JBQzdCLFlBQVksRUFBRSx1QkFBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPO2dCQUN6QyxjQUFjLEVBQUUsNENBQTRDO2dCQUM1RCxRQUFRLEVBQUUsQ0FBQzthQUNaLENBQUMsQ0FBQztZQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEM7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLHNDQUFzQztZQUN0QyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyJ9