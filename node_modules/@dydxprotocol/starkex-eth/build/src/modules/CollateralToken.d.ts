import { Contracts } from '../lib/Contracts';
import { BigNumberable, CallOptions, SendOptions, TxResult, Address } from '../types';
export declare class CollateralToken {
    protected contracts: Contracts;
    private token;
    constructor(contracts: Contracts);
    getAddress(): string;
    getAssetId(): string;
    getAllowance({ ownerAddress, spenderAddress, }: {
        ownerAddress: Address;
        spenderAddress: Address;
    }, options?: CallOptions): Promise<string>;
    getBalance({ ownerAddress, }: {
        ownerAddress: Address;
    }, options?: CallOptions): Promise<string>;
    getTotalSupply(options?: CallOptions): Promise<string>;
    getName(options?: CallOptions): Promise<string>;
    getSymbol(options?: CallOptions): Promise<string>;
    getDecimals(options?: CallOptions): Promise<number>;
    getExchangeAllowance({ ownerAddress, }: {
        ownerAddress: Address;
    }, options?: CallOptions): Promise<string>;
    setAllowance({ spenderAddress, humanAmount, }: {
        spenderAddress: Address;
        humanAmount: BigNumberable;
    }, options?: SendOptions): Promise<TxResult>;
    setExchangeAllowance({ humanAmount, }: {
        humanAmount: BigNumberable;
    }, options?: SendOptions): Promise<TxResult>;
    setMaximumAllowance({ spenderAddress, }: {
        spenderAddress: Address;
    }, options?: SendOptions): Promise<TxResult>;
    setMaximumExchangeAllowance(options?: SendOptions): Promise<TxResult>;
    unsetExchangeAllowance(options?: SendOptions): Promise<TxResult>;
    transfer({ toAddress, humanAmount, }: {
        toAddress: Address;
        humanAmount: BigNumberable;
    }, options?: SendOptions): Promise<TxResult>;
    transferFrom({ fromAddress, toAddress, humanAmount, }: {
        fromAddress: Address;
        toAddress: Address;
        humanAmount: BigNumberable;
    }, options?: SendOptions): Promise<TxResult>;
    isBlacklisted({ address, }: {
        address: Address;
    }, options?: CallOptions): Promise<boolean>;
}
