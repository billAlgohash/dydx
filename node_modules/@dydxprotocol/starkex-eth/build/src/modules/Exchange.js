"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Exchange = void 0;
const big_js_1 = __importDefault(require("big.js"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const lodash_1 = __importDefault(require("lodash"));
const zeroEx_1 = require("../clients/zeroEx");
const ierc20_abi_json_1 = __importDefault(require("../contracts/ierc20-abi.json"));
const Constants_1 = require("../lib/Constants");
const ContractCallHelpers_1 = require("../lib/ContractCallHelpers");
const helpers_1 = require("../lib/helpers");
const types_1 = require("../types");
class Exchange {
    constructor(contracts) {
        this.contracts = contracts;
    }
    getAddress() {
        return this.contracts.starkwarePerpetual.options.address;
    }
    getProxyDepositAddress() {
        return this.contracts.proxyDepositContract.options.address;
    }
    async register({ ethAddress, starkKey, signature, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.registerUser(ethAddress, (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), signature), options);
    }
    async registerAndDeposit({ ethAddress, starkKey, signature, positionId, humanAmount, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.registerAndDepositERC20(ethAddress, (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), signature, Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId], (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
    }
    async deposit({ starkKey, positionId, humanAmount, }, options) {
        const depositFunctionSignature = 'deposit(uint256,uint256,uint256,uint256)';
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods[depositFunctionSignature]((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId], (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
    }
    async proxyDeposit({ humanAmount, starkKey, positionId, registerUserSignature = Buffer.from('', 'utf8'), }, options) {
        if (options === null || options === void 0 ? void 0 : options.sendGaslessTransaction) {
            return (0, helpers_1.sendGaslessTransaction)(this.contracts.proxyDepositContract.methods.deposit((0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount), (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), registerUserSignature).send(options));
        }
        return this.contracts.send(this.contracts.proxyDepositContract, this.contracts.proxyDepositContract.methods.deposit((0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount), (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), registerUserSignature), options);
    }
    async proxyDepositERC20({ humanMinUsdcAmount, starkKey, positionId, zeroExResponseObject, registerUserSignature = Buffer.from('', 'utf8'), getTokenApproval = false, getExchangeApproval = false, }, options) {
        const exchangeProxyData = this.encodeZeroExExchangeData({
            tokenFrom: getTokenApproval ? zeroExResponseObject.sellTokenAddress : Constants_1.ZERO_ADDRESS,
            allowanceTarget: getExchangeApproval ? zeroExResponseObject.allowanceTarget : Constants_1.ZERO_ADDRESS,
            minUsdcAmount: (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanMinUsdcAmount),
            exchange: zeroExResponseObject.to,
            exchangeData: zeroExResponseObject.data.toString(),
        });
        if (options === null || options === void 0 ? void 0 : options.sendGaslessTransaction) {
            return (0, helpers_1.sendGaslessTransaction)(this.contracts.proxyDepositContract.methods.depositERC20(zeroExResponseObject.sellTokenAddress, zeroExResponseObject.sellAmount, (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), Constants_1.USDC_EXCHANGE_ADDRESSES[this.contracts.networkId], exchangeProxyData, registerUserSignature).send(options));
        }
        return this.contracts.send(this.contracts.proxyDepositContract, this.contracts.proxyDepositContract.methods.depositERC20(zeroExResponseObject.sellTokenAddress, zeroExResponseObject.sellAmount, (0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), Constants_1.USDC_EXCHANGE_ADDRESSES[this.contracts.networkId], exchangeProxyData, registerUserSignature), options);
    }
    async proxyDepositEth({ humanMinUsdcAmount, starkKey, positionId, zeroExResponseObject, registerUserSignature = Buffer.from('', 'utf8'), }, options) {
        if ((options === null || options === void 0 ? void 0 : options.value) !== undefined && !(0, big_js_1.default)(options.value).eq(zeroExResponseObject.value)) {
            throw Error(`proxyDepositEth: A transaction value ${options.value} was provided which does not match the swap cost of ${zeroExResponseObject.value}`);
        }
        const exchangeProxyData = this.encodeZeroExExchangeData({
            tokenFrom: Constants_1.ZERO_ADDRESS,
            allowanceTarget: Constants_1.ZERO_ADDRESS,
            minUsdcAmount: (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanMinUsdcAmount),
            exchange: zeroExResponseObject.to,
            exchangeData: zeroExResponseObject.data.toString(),
        });
        if (options === null || options === void 0 ? void 0 : options.sendGaslessTransaction) {
            return (0, helpers_1.sendGaslessTransaction)(this.contracts.proxyDepositContract.methods.depositEth((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), Constants_1.USDC_EXCHANGE_ADDRESSES[this.contracts.networkId], exchangeProxyData, registerUserSignature).send({ ...options, value: zeroExResponseObject.value }));
        }
        return this.contracts.send(this.contracts.proxyDepositContract, this.contracts.proxyDepositContract.methods.depositEth((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), Constants_1.USDC_EXCHANGE_ADDRESSES[this.contracts.networkId], exchangeProxyData, registerUserSignature), { ...options, value: zeroExResponseObject.value });
    }
    /**
     * @description get expected and worst USDC for some amount of input sellToken.
     * @notice For eth pass in 'ETH' as the sellToken.
     */
    async estimateConversionAmount({ humanSellAmount, sellToken, decimals, slippagePercentage, }) {
        (0, zeroEx_1.validateSlippage)(slippagePercentage);
        const sellAmount = (0, ContractCallHelpers_1.humanTokenAmountToUint256)(humanSellAmount, decimals);
        const zeroExResponseObject = await (0, zeroEx_1.getZeroExSwapQuote)({
            sellAmount,
            sellToken,
            buyTokenAddress: (0, helpers_1.getUsdcAddress)(this.contracts.networkId),
            slippagePercentage,
            networkId: this.contracts.networkId,
        });
        const expectedUsdcHumanAmount = (0, big_js_1.default)(zeroExResponseObject.buyAmount);
        expectedUsdcHumanAmount.e -= types_1.BASE_DECIMALS;
        const worstUsdcHumanAmount = (0, big_js_1.default)(humanSellAmount).mul(zeroExResponseObject.guaranteedPrice);
        return {
            expectedUsdcHumanAmount: expectedUsdcHumanAmount.round(types_1.BASE_DECIMALS, 0).toString(),
            worstUsdcHumanAmount: worstUsdcHumanAmount.round(types_1.BASE_DECIMALS, 0).toString(),
            zeroExResponseObject,
        };
    }
    async withdraw({ starkKey, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.withdraw((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId]), options);
    }
    async withdrawTo({ starkKey, recipient, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.withdrawTo((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId], recipient), options);
    }
    async forcedWithdrawalRequest({ starkKey, positionId, humanAmount, premiumCost, }, options) {
        return this.contracts.send(this.contracts.starkwarePerpetual, this.contracts.starkwarePerpetual.methods.forcedWithdrawalRequest((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount), premiumCost), options);
    }
    async setERC20Allowance({ tokenAddress, address, amount, }, options) {
        const token = new this.contracts.web3.eth.Contract(ierc20_abi_json_1.default.abi);
        token.options.address = tokenAddress;
        return this.contracts.send(token, token.methods.approve(address, amount), options);
    }
    // ============ Getters ============
    async getEthKey({ starkKey, }, options) {
        try {
            const result = await this.contracts.call(this.contracts.starkwarePerpetual.methods.getEthKey((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey)), options);
            return result;
        }
        catch (e) {
            if (e.message && e.message.includes('USER_UNREGISTERED')) {
                return null;
            }
            throw e;
        }
    }
    async getWithdrawalBalance({ starkKey, }, options) {
        const result = await this.contracts.call(this.contracts.starkwarePerpetual.methods.getWithdrawalBalance((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId]), options);
        return (0, ContractCallHelpers_1.uint256ToHumanCollateralTokenAmount)(result);
    }
    async hasCancellationRequest({ starkKey, vaultId, }, options) {
        const result = await this.contracts.call(this.contracts.starkwarePerpetual.methods.getCancellationRequest((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId], (0, ContractCallHelpers_1.bignumberableToUint256)(vaultId)), options);
        return !new bignumber_js_1.default(result).isZero();
    }
    async hasForcedWithdrawalRequest({ starkKey, positionId, humanAmount, }, options) {
        const result = await this.contracts.call(this.contracts.starkwarePerpetual.methods.getForcedWithdrawalRequest((0, ContractCallHelpers_1.starkKeyToUint256)(starkKey), (0, ContractCallHelpers_1.bignumberableToUint256)(positionId), (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
        return !new bignumber_js_1.default(result).isZero();
    }
    async getERC20Allowance({ ownerAddress, spenderAddress, tokenAddress, decimals, }, options) {
        const token = new this.contracts.web3.eth.Contract(ierc20_abi_json_1.default.abi);
        token.options.address = tokenAddress;
        const allowance = await this.contracts.call(token.methods.allowance(ownerAddress, spenderAddress), options);
        return (0, ContractCallHelpers_1.uint256ToHumanTokenAmount)(allowance, decimals);
    }
    encodeZeroExExchangeData(proxyExchangeData) {
        return this.contracts.web3.eth.abi.encodeParameters([
            'address',
            'address',
            'uint256',
            'address',
            'bytes',
        ], lodash_1.default.at(proxyExchangeData, [
            'tokenFrom',
            'allowanceTarget',
            'minUsdcAmount',
            'exchange',
            'exchangeData',
        ]));
    }
}
exports.Exchange = Exchange;
//# sourceMappingURL=data:application/json;base64,