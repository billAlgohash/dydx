"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollateralToken = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const Constants_1 = require("../lib/Constants");
const ContractCallHelpers_1 = require("../lib/ContractCallHelpers");
class CollateralToken {
    constructor(contracts) {
        this.contracts = contracts;
        this.token = contracts.collateralToken;
    }
    getAddress() {
        return this.contracts.collateralToken.options.address;
    }
    getAssetId() {
        return Constants_1.COLLATERAL_ASSET_ID[this.contracts.networkId];
    }
    async getAllowance({ ownerAddress, spenderAddress, }, options) {
        const allowance = await this.contracts.call(this.token.methods.allowance(ownerAddress, spenderAddress), options);
        return (0, ContractCallHelpers_1.uint256ToHumanCollateralTokenAmount)(allowance);
    }
    async getBalance({ ownerAddress, }, options) {
        const balance = await this.contracts.call(this.token.methods.balanceOf(ownerAddress), options);
        return (0, ContractCallHelpers_1.uint256ToHumanCollateralTokenAmount)(balance);
    }
    async getTotalSupply(options) {
        const supply = await this.contracts.call(this.token.methods.totalSupply(), options);
        return (0, ContractCallHelpers_1.uint256ToHumanCollateralTokenAmount)(supply);
    }
    async getName(options) {
        return this.contracts.call(this.token.methods.name(), options);
    }
    async getSymbol(options) {
        return this.contracts.call(this.token.methods.symbol(), options);
    }
    async getDecimals(options) {
        const decimals = await this.contracts.call(this.token.methods.decimals(), options);
        return new bignumber_js_1.default(decimals).toNumber();
    }
    async getExchangeAllowance({ ownerAddress, }, options) {
        return this.getAllowance({
            ownerAddress,
            spenderAddress: this.contracts.starkwarePerpetual.options.address,
        }, options);
    }
    async setAllowance({ spenderAddress, humanAmount, }, options) {
        return this.contracts.send(this.token, this.token.methods.approve(spenderAddress, (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
    }
    async setExchangeAllowance({ humanAmount, }, options) {
        return this.setAllowance({
            spenderAddress: this.contracts.starkwarePerpetual.options.address,
            humanAmount,
        }, options);
    }
    async setMaximumAllowance({ spenderAddress, }, options) {
        return this.contracts.send(this.token, this.token.methods.approve(spenderAddress, Constants_1.INTEGERS.ONES_255), options);
    }
    async setMaximumExchangeAllowance(options) {
        return this.setMaximumAllowance({
            spenderAddress: this.contracts.starkwarePerpetual.options.address,
        }, options);
    }
    async unsetExchangeAllowance(options) {
        return this.setAllowance({
            spenderAddress: this.contracts.starkwarePerpetual.options.address,
            humanAmount: '0',
        }, options);
    }
    async transfer({ toAddress, humanAmount, }, options) {
        return this.contracts.send(this.token, this.token.methods.transfer(toAddress, (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
    }
    async transferFrom({ fromAddress, toAddress, humanAmount, }, options) {
        return this.contracts.send(this.token, this.token.methods.transferFrom(fromAddress, toAddress, (0, ContractCallHelpers_1.humanCollateralAmountToUint256)(humanAmount)), options);
    }
    async isBlacklisted({ address, }, options) {
        const result = await this.contracts.call(this.token.methods.isBlacklisted(address), options);
        return result;
    }
}
exports.CollateralToken = CollateralToken;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sbGF0ZXJhbFRva2VuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvQ29sbGF0ZXJhbFRva2VuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdFQUFxQztBQUdyQyxnREFBaUU7QUFDakUsb0VBR29DO0FBVXBDLE1BQWEsZUFBZTtJQUkxQixZQUNFLFNBQW9CO1FBRXBCLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzNCLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLGVBQWUsQ0FBQztJQUN6QyxDQUFDO0lBRU0sVUFBVTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN4RCxDQUFDO0lBRU0sVUFBVTtRQUNmLE9BQU8sK0JBQW1CLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sS0FBSyxDQUFDLFlBQVksQ0FDdkIsRUFDRSxZQUFZLEVBQ1osY0FBYyxHQUlmLEVBQ0QsT0FBcUI7UUFFckIsTUFBTSxTQUFTLEdBQVcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDakQsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsRUFDMUQsT0FBTyxDQUNSLENBQUM7UUFDRixPQUFPLElBQUEseURBQW1DLEVBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxVQUFVLENBQ3JCLEVBQ0UsWUFBWSxHQUdiLEVBQ0QsT0FBcUI7UUFFckIsTUFBTSxPQUFPLEdBQVcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUMxQyxPQUFPLENBQ1IsQ0FBQztRQUNGLE9BQU8sSUFBQSx5REFBbUMsRUFBQyxPQUFPLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sS0FBSyxDQUFDLGNBQWMsQ0FDekIsT0FBcUI7UUFFckIsTUFBTSxNQUFNLEdBQVcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDOUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQ2hDLE9BQU8sQ0FDUixDQUFDO1FBQ0YsT0FBTyxJQUFBLHlEQUFtQyxFQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUNsQixPQUFxQjtRQUVyQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUN4QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFDekIsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDO0lBRU0sS0FBSyxDQUFDLFNBQVMsQ0FDcEIsT0FBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQzNCLE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQ3RCLE9BQXFCO1FBRXJCLE1BQU0sUUFBUSxHQUFXLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ2hELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUM3QixPQUFPLENBQ1IsQ0FBQztRQUNGLE9BQU8sSUFBSSxzQkFBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFTSxLQUFLLENBQUMsb0JBQW9CLENBQy9CLEVBQ0UsWUFBWSxHQUdiLEVBQ0QsT0FBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUN0QjtZQUNFLFlBQVk7WUFDWixjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTztTQUNsRSxFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxZQUFZLENBQ3ZCLEVBQ0UsY0FBYyxFQUNkLFdBQVcsR0FJWixFQUNELE9BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ3hCLElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUN4QixjQUFjLEVBQ2QsSUFBQSxvREFBOEIsRUFBQyxXQUFXLENBQUMsQ0FDNUMsRUFDRCxPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFTSxLQUFLLENBQUMsb0JBQW9CLENBQy9CLEVBQ0UsV0FBVyxHQUdaLEVBQ0QsT0FBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUN0QjtZQUNFLGNBQWMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPO1lBQ2pFLFdBQVc7U0FDWixFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxtQkFBbUIsQ0FDOUIsRUFDRSxjQUFjLEdBR2YsRUFDRCxPQUFxQjtRQUVyQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUN4QixJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDeEIsY0FBYyxFQUNkLG9CQUFRLENBQUMsUUFBUSxDQUNsQixFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQywyQkFBMkIsQ0FDdEMsT0FBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQzdCO1lBQ0UsY0FBYyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLE9BQU87U0FDbEUsRUFDRCxPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFTSxLQUFLLENBQUMsc0JBQXNCLENBQ2pDLE9BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FDdEI7WUFDRSxjQUFjLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTztZQUNqRSxXQUFXLEVBQUUsR0FBRztTQUNqQixFQUNELE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUssQ0FBQyxRQUFRLENBQ25CLEVBQ0UsU0FBUyxFQUNULFdBQVcsR0FJWixFQUNELE9BQXFCO1FBRXJCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQ3hCLElBQUksQ0FBQyxLQUFLLEVBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUN6QixTQUFTLEVBQ1QsSUFBQSxvREFBOEIsRUFBQyxXQUFXLENBQUMsQ0FDNUMsRUFDRCxPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFTSxLQUFLLENBQUMsWUFBWSxDQUN2QixFQUNFLFdBQVcsRUFDWCxTQUFTLEVBQ1QsV0FBVyxHQUtaLEVBQ0QsT0FBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDeEIsSUFBSSxDQUFDLEtBQUssRUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQzdCLFdBQVcsRUFDWCxTQUFTLEVBQ1QsSUFBQSxvREFBOEIsRUFBQyxXQUFXLENBQUMsQ0FDNUMsRUFDRCxPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUN4QixFQUNFLE9BQU8sR0FHUixFQUNELE9BQXFCO1FBRXJCLE1BQU0sTUFBTSxHQUFZLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFDekMsT0FBTyxDQUNSLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFqUEQsMENBaVBDIn0=