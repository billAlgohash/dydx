"use strict";
/**
 * Other helper functions for converting data for Starkware.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSignedAssetId = exports.getSignedAssetName = exports.addOrderExpirationBufferHours = exports.isoTimestampToEpochHours = exports.isoTimestampToEpochSeconds = exports.nonceFromClientId = void 0;
const crypto_1 = __importDefault(require("crypto"));
const bn_js_1 = __importDefault(require("bn.js"));
const util_1 = require("../lib/util");
const constants_1 = require("../signable/constants");
const MAX_NONCE = new bn_js_1.default(2).pow(new bn_js_1.default(constants_1.ORDER_FIELD_BIT_LENGTHS.nonce));
const ONE_SECOND_MS = 1000;
const ONE_HOUR_MS = 60 * 60 * ONE_SECOND_MS;
/**
 * Generate a nonce deterministically from an arbitrary string provided by a client.
 */
function nonceFromClientId(clientId) {
    const nonceHex = crypto_1.default.createHash('sha256').update(clientId).digest('hex');
    return (0, util_1.hexToBn)(nonceHex).mod(MAX_NONCE).toString();
}
exports.nonceFromClientId = nonceFromClientId;
/**
 * Convert an ISO timestamp to an epoch timestamp in seconds, rounding down.
 */
function isoTimestampToEpochSeconds(isoTimestamp) {
    return Math.floor(new Date(isoTimestamp).getTime() / ONE_SECOND_MS);
}
exports.isoTimestampToEpochSeconds = isoTimestampToEpochSeconds;
/**
 * Convert an ISO timestamp to an epoch timestamp in hours, rounding up.
 */
function isoTimestampToEpochHours(isoTimestamp) {
    return Math.ceil(new Date(isoTimestamp).getTime() / ONE_HOUR_MS);
}
exports.isoTimestampToEpochHours = isoTimestampToEpochHours;
/**
 * Add expiration buffer to ensure an order signature is valid when it arrives on-chain.
 */
function addOrderExpirationBufferHours(expirationEpochHours) {
    return expirationEpochHours + constants_1.STARK_ORDER_SIGNATURE_EXPIRATION_BUFFER_HOURS;
}
exports.addOrderExpirationBufferHours = addOrderExpirationBufferHours;
/**
 * Get the asset name to be signed by a price oracle. It is the market name with the hyphen removed.
 */
function getSignedAssetName(market) {
    return market.replace('-', '');
}
exports.getSignedAssetName = getSignedAssetName;
/**
 * Get the asset ID to be signed by a price oracle. It consists of an asset name and oracle name.
 */
function getSignedAssetId(assetName, oracleName) {
    const assetNameBn = (0, util_1.utf8ToBn)(assetName, constants_1.ORACLE_PRICE_FIELD_BIT_LENGTHS.assetName);
    const oracleNameBn = (0, util_1.utf8ToBn)(oracleName, constants_1.ORACLE_PRICE_FIELD_BIT_LENGTHS.oracleName);
    const signedAssetIdBn = assetNameBn
        .iushln(constants_1.ORACLE_PRICE_FIELD_BIT_LENGTHS.oracleName)
        .iadd(oracleNameBn);
    return signedAssetIdBn.toString(16);
}
exports.getSignedAssetId = getSignedAssetId;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlzYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9oZWxwZXJzL21pc2MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7Ozs7QUFFSCxvREFBZ0M7QUFFaEMsa0RBQXVCO0FBRXZCLHNDQUFnRDtBQUNoRCxxREFJK0I7QUFHL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLG1DQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDdkUsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDO0FBQzNCLE1BQU0sV0FBVyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsYUFBYSxDQUFDO0FBRTVDOztHQUVHO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQUMsUUFBZ0I7SUFDaEQsTUFBTSxRQUFRLEdBQUcsZ0JBQVUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRixPQUFPLElBQUEsY0FBTyxFQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNyRCxDQUFDO0FBSEQsOENBR0M7QUFFRDs7R0FFRztBQUNILFNBQWdCLDBCQUEwQixDQUFDLFlBQW9CO0lBQzdELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxhQUFhLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRkQsZ0VBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLHdCQUF3QixDQUFDLFlBQW9CO0lBQzNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQztBQUNuRSxDQUFDO0FBRkQsNERBRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLDZCQUE2QixDQUFDLG9CQUE0QjtJQUN4RSxPQUFPLG9CQUFvQixHQUFHLHlEQUE2QyxDQUFDO0FBQzlFLENBQUM7QUFGRCxzRUFFQztBQUVEOztHQUVHO0FBQ0gsU0FBZ0Isa0JBQWtCLENBQ2hDLE1BQWtCO0lBRWxCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUpELGdEQUlDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixnQkFBZ0IsQ0FDOUIsU0FBaUIsRUFDakIsVUFBa0I7SUFFbEIsTUFBTSxXQUFXLEdBQUcsSUFBQSxlQUFRLEVBQUMsU0FBUyxFQUFFLDBDQUE4QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2xGLE1BQU0sWUFBWSxHQUFHLElBQUEsZUFBUSxFQUFDLFVBQVUsRUFBRSwwQ0FBOEIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVyRixNQUFNLGVBQWUsR0FBRyxXQUFXO1NBQ2hDLE1BQU0sQ0FBQywwQ0FBOEIsQ0FBQyxVQUFVLENBQUM7U0FDakQsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sZUFBZSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBWEQsNENBV0MifQ==