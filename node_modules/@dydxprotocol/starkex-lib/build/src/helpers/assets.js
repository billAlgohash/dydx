"use strict";
/**
 * Helper functions for converting asset IDs and amounts.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStarkwareLimitFeeAmount = exports.getStarkwareAmounts = exports.fromQuantums = exports.toQuantumsRoundUp = exports.toQuantumsRoundDown = exports.toQuantumsExact = void 0;
const big_js_1 = __importDefault(require("big.js"));
const constants_1 = require("../constants");
const types_1 = require("../types");
/**
 * Convert a human-readable asset amount to an integer amount of the asset's quantum size.
 *
 * If the provided value is not a multiple of the quantum size, throw an error.
 */
function toQuantumsExact(humanAmount, asset) {
    return toQuantumsHelper(humanAmount, asset, 0 /* RoundDown */, true);
}
exports.toQuantumsExact = toQuantumsExact;
/**
 * Convert a human-readable asset amount to an integer amount of the asset's quantum size.
 *
 * If the provided value is not a multiple of the quantum size, round down.
 */
function toQuantumsRoundDown(humanAmount, asset) {
    return toQuantumsHelper(humanAmount, asset, 0 /* RoundDown */, false);
}
exports.toQuantumsRoundDown = toQuantumsRoundDown;
/**
 * Convert a human-readable asset amount to an integer amount of the asset's quantum size.
 *
 * If the provided value is not a multiple of the quantum size, round up.
 */
function toQuantumsRoundUp(humanAmount, asset) {
    return toQuantumsHelper(humanAmount, asset, 3 /* RoundUp */, false);
}
exports.toQuantumsRoundUp = toQuantumsRoundUp;
function toQuantumsHelper(humanAmount, asset, rm, assertIntegerResult) {
    const amountBig = new big_js_1.default(humanAmount);
    const quantumSize = constants_1.ASSET_QUANTUM_SIZE[asset];
    const remainder = amountBig.mod(quantumSize);
    if (assertIntegerResult && !remainder.eq(0)) {
        throw new Error(`toQuantums: Amount ${humanAmount} is not a multiple of the quantum size ${quantumSize}`);
    }
    return amountBig.div(quantumSize).round(0, rm).toFixed(0);
}
/**
 * Convert a number of quantums to a human-readable asset amount.
 *
 * Example:
 *   Suppose the quantum size in Starkware for synthetic ETH is 10^10 (10 Gwei).
 *   Then fromQuantums(1000, DydxAsset.ETH), representing 10,000 Gwei, returns a value of 0.00001.
 */
function fromQuantums(quantumAmount, asset) {
    const quantumSize = constants_1.ASSET_QUANTUM_SIZE[asset];
    if (!quantumSize) {
        throw new Error(`Unknown asset ${asset}`);
    }
    return new big_js_1.default(quantumAmount).mul(quantumSize).toFixed();
}
exports.fromQuantums = fromQuantums;
/**
 * Get Starkware order fields, given paramters from an order and/or fill.
 *
 * Must provide either quoteAmount or price.
 */
function getStarkwareAmounts(params, networkId) {
    const { market, side, humanSize, humanQuoteAmount, humanPrice, } = params;
    // Determine side and assets.
    const isBuyingSynthetic = side === types_1.StarkwareOrderSide.BUY;
    const syntheticAsset = constants_1.SYNTHETIC_ASSET_MAP[market];
    const assetIdSynthetic = constants_1.SYNTHETIC_ASSET_ID_MAP[syntheticAsset];
    if (!assetIdSynthetic) {
        throw new Error(`Unknown market ${market}`);
    }
    // Convert the synthetic amount to Starkware quantums.
    const quantumsAmountSynthetic = toQuantumsExact(humanSize, syntheticAsset);
    // Get the human-readable collateral asset amount (a.k.a. "quote amount").
    const humanAmountCollateral = typeof humanQuoteAmount === 'string'
        ? humanQuoteAmount
        : new big_js_1.default(humanSize).times(humanPrice).toFixed(); // Non-null assertion safe based on types.
    // If quoteAmount was specified, don't allow rounding.
    // Otherwise, round differently depending on the order side.
    let toQuantumsFnForCost = toQuantumsExact;
    if (typeof humanQuoteAmount !== 'string') {
        toQuantumsFnForCost = isBuyingSynthetic
            ? toQuantumsRoundUp
            : toQuantumsRoundDown;
    }
    const quantumsAmountCollateral = toQuantumsFnForCost(humanAmountCollateral, constants_1.COLLATERAL_ASSET);
    return {
        quantumsAmountSynthetic,
        quantumsAmountCollateral,
        assetIdSynthetic,
        assetIdCollateral: constants_1.COLLATERAL_ASSET_ID_BY_NETWORK_ID[networkId],
        isBuyingSynthetic,
    };
}
exports.getStarkwareAmounts = getStarkwareAmounts;
/**
 * Convert a limit fee fraction for an order into a collateral quantums amount.
 */
function getStarkwareLimitFeeAmount(limitFee, quantumsAmountCollateral) {
    // Constrain the limit fee to six decimals of precision. The final fee amount must be rounded up.
    return new big_js_1.default(limitFee)
        .round(6, 0 /* RoundDown */)
        .times(quantumsAmountCollateral)
        .round(0, 3 /* RoundUp */)
        .toFixed(0);
}
exports.getStarkwareLimitFeeAmount = getStarkwareLimitFeeAmount;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2hlbHBlcnMvYXNzZXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7Ozs7O0FBRUgsb0RBQTJDO0FBRTNDLDRDQU1zQjtBQUN0QixvQ0FRa0I7QUFFbEI7Ozs7R0FJRztBQUNILFNBQWdCLGVBQWUsQ0FDN0IsV0FBbUIsRUFDbkIsS0FBZ0I7SUFFaEIsT0FBTyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsS0FBSyxxQkFBMEIsSUFBSSxDQUFDLENBQUM7QUFDNUUsQ0FBQztBQUxELDBDQUtDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQWdCLG1CQUFtQixDQUNqQyxXQUFtQixFQUNuQixLQUFnQjtJQUVoQixPQUFPLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxLQUFLLHFCQUEwQixLQUFLLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBTEQsa0RBS0M7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IsaUJBQWlCLENBQy9CLFdBQW1CLEVBQ25CLEtBQWdCO0lBRWhCLE9BQU8sZ0JBQWdCLENBQUMsV0FBVyxFQUFFLEtBQUssbUJBQXdCLEtBQUssQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUFMRCw4Q0FLQztBQUVELFNBQVMsZ0JBQWdCLENBQ3ZCLFdBQW1CLEVBQ25CLEtBQWdCLEVBQ2hCLEVBQWdCLEVBQ2hCLG1CQUE0QjtJQUU1QixNQUFNLFNBQVMsR0FBRyxJQUFJLGdCQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdkMsTUFBTSxXQUFXLEdBQUcsOEJBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3QyxJQUFJLG1CQUFtQixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMzQyxNQUFNLElBQUksS0FBSyxDQUNiLHNCQUFzQixX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