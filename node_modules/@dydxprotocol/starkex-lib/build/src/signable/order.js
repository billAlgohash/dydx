"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignableOrder = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const helpers_1 = require("../helpers");
const crypto_1 = require("../lib/crypto");
const util_1 = require("../lib/util");
const types_1 = require("../types");
const constants_1 = require("./constants");
const hashes_1 = require("./hashes");
const stark_signable_1 = require("./stark-signable");
const LIMIT_ORDER_WITH_FEES = 3;
const ORDER_PADDING_BITS = 17;
/**
 * Wrapper object to convert an order, and hash, sign, and verify its signature.
 */
class SignableOrder extends stark_signable_1.StarkSignable {
    static fromOrderWithClientId(order, networkId) {
        // Make the nonce by hashing the client-provided ID.
        const nonce = (0, helpers_1.nonceFromClientId)(order.clientId);
        return SignableOrder.fromOrderWithNonce({
            ...order,
            clientId: undefined,
            nonce,
        }, networkId);
    }
    static fromOrderWithNonce(order, networkId) {
        const nonce = order.nonce;
        const positionId = order.positionId;
        // Within the Starkware system, there is currently only one order type.
        const orderType = types_1.StarkwareOrderType.LIMIT_ORDER_WITH_FEES;
        // Need to be careful that the (size, price) -> (amountBuy, amountSell) function is
        // well-defined and applied consistently.
        const { quantumsAmountSynthetic, quantumsAmountCollateral, assetIdSynthetic, assetIdCollateral, isBuyingSynthetic, } = (0, helpers_1.getStarkwareAmounts)(order, networkId);
        // The limitFee is a fraction, e.g. 0.01 is a 1% fee. It is always paid in the collateral asset.
        const quantumsAmountFee = (0, helpers_1.getStarkwareLimitFeeAmount)(order.limitFee, quantumsAmountCollateral);
        // Convert to a Unix timestamp (in hours) and add buffer to ensure signature is valid on-chain.
        const expirationEpochHours = (0, helpers_1.addOrderExpirationBufferHours)((0, helpers_1.isoTimestampToEpochHours)(order.expirationIsoTimestamp));
        return new SignableOrder({
            orderType,
            nonce,
            quantumsAmountSynthetic,
            quantumsAmountCollateral,
            quantumsAmountFee,
            assetIdSynthetic,
            assetIdCollateral,
            assetIdFee: assetIdCollateral,
            positionId,
            isBuyingSynthetic,
            expirationEpochHours,
        }, networkId);
    }
    async calculateHash() {
        const assetIdSyntheticBn = (0, util_1.hexToBn)(this.message.assetIdSynthetic);
        const assetIdCollateralBn = (0, util_1.hexToBn)(this.message.assetIdCollateral);
        const assetIdFeeBn = (0, util_1.hexToBn)(this.message.assetIdFee);
        const quantumsAmountSyntheticBn = (0, util_1.decToBn)(this.message.quantumsAmountSynthetic);
        const quantumsAmountCollateralBn = (0, util_1.decToBn)(this.message.quantumsAmountCollateral);
        const quantumsAmountFeeBn = (0, util_1.decToBn)(this.message.quantumsAmountFee);
        const nonceBn = (0, util_1.decToBn)(this.message.nonce);
        const positionIdBn = (0, util_1.decToBn)(this.message.positionId);
        const expirationEpochHours = (0, util_1.intToBn)(this.message.expirationEpochHours);
        const [assetIdSellBn, assetIdBuyBn] = this.message.isBuyingSynthetic
            ? [assetIdCollateralBn, assetIdSyntheticBn]
            : [assetIdSyntheticBn, assetIdCollateralBn];
        const [quantumsAmountSellBn, quantumsAmountBuyBn] = this.message.isBuyingSynthetic
            ? [quantumsAmountCollateralBn, quantumsAmountSyntheticBn]
            : [quantumsAmountSyntheticBn, quantumsAmountCollateralBn];
        if (assetIdSyntheticBn.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.assetIdSynthetic) {
            throw new Error('SignableOrder: assetIdSynthetic exceeds max value');
        }
        if (assetIdCollateralBn.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.assetIdCollateral) {
            throw new Error('SignableOrder: assetIdCollateral exceeds max value');
        }
        if (assetIdFeeBn.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.assetIdFee) {
            throw new Error('SignableOrder: assetIdFee exceeds max value');
        }
        if (quantumsAmountSyntheticBn.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.quantumsAmount) {
            throw new Error('SignableOrder: quantumsAmountSynthetic exceeds max value');
        }
        if (quantumsAmountCollateralBn.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.quantumsAmount) {
            throw new Error('SignableOrder: quantumsAmountCollateral exceeds max value');
        }
        if (quantumsAmountFeeBn.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.quantumsAmount) {
            throw new Error('SignableOrder: quantumsAmountFee exceeds max value');
        }
        if (nonceBn.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.nonce) {
            throw new Error('SignableOrder: nonce exceeds max value');
        }
        if (positionIdBn.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.positionId) {
            throw new Error('SignableOrder: positionId exceeds max value');
        }
        if (expirationEpochHours.bitLength() > constants_1.ORDER_FIELD_BIT_LENGTHS.expirationEpochHours) {
            throw new Error('SignableOrder: expirationEpochHours exceeds max value');
        }
        const orderPart1 = new bn_js_1.default(quantumsAmountSellBn.toString(), 10)
            .iushln(constants_1.ORDER_FIELD_BIT_LENGTHS.quantumsAmount).iadd(quantumsAmountBuyBn)
            .iushln(constants_1.ORDER_FIELD_BIT_LENGTHS.quantumsAmount).iadd(quantumsAmountFeeBn)
            .iushln(constants_1.ORDER_FIELD_BIT_LENGTHS.nonce).iadd(nonceBn);
        const orderPart2 = new bn_js_1.default(LIMIT_ORDER_WITH_FEES)
            .iushln(constants_1.ORDER_FIELD_BIT_LENGTHS.positionId).iadd(positionIdBn) // Repeat (1/3).
            .iushln(constants_1.ORDER_FIELD_BIT_LENGTHS.positionId).iadd(positionIdBn) // Repeat (2/3).
            .iushln(constants_1.ORDER_FIELD_BIT_LENGTHS.positionId).iadd(positionIdBn) // Repeat (3/3).
            .iushln(constants_1.ORDER_FIELD_BIT_LENGTHS.expirationEpochHours).iadd(expirationEpochHours)
            .iushln(ORDER_PADDING_BITS);
        const assetsBn = await (0, hashes_1.getCacheablePedersenHash)(await (0, hashes_1.getCacheablePedersenHash)(assetIdSellBn, assetIdBuyBn), assetIdFeeBn);
        return (0, crypto_1.getPedersenHash)(await (0, crypto_1.getPedersenHash)(assetsBn, orderPart1), orderPart2);
    }
    toStarkware() {
        return this.message;
    }
}
exports.SignableOrder = SignableOrder;
SignableOrder.fromOrder = SignableOrder.fromOrderWithClientId; // Alias.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2lnbmFibGUvb3JkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0RBQXVCO0FBRXZCLHdDQU1vQjtBQUNwQiwwQ0FBZ0Q7QUFDaEQsc0NBSXFCO0FBQ3JCLG9DQVFrQjtBQUNsQiwyQ0FFcUI7QUFDckIscUNBQW9EO0FBQ3BELHFEQUFpRDtBQUVqRCxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQztBQUNoQyxNQUFNLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztBQUU5Qjs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLDhCQUE2QjtJQUk5RCxNQUFNLENBQUMscUJBQXFCLENBQzFCLEtBQTBELEVBQzFELFNBQW9CO1FBRXBCLG9EQUFvRDtRQUNwRCxNQUFNLEtBQUssR0FBRyxJQUFBLDJCQUFpQixFQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRCxPQUFPLGFBQWEsQ0FBQyxrQkFBa0IsQ0FDckM7WUFDRSxHQUFHLEtBQUs7WUFDUixRQUFRLEVBQUUsU0FBUztZQUNuQixLQUFLO1NBQ04sRUFDRCxTQUFTLENBQ1YsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsa0JBQWtCLENBQ3ZCLEtBQW9ELEVBQ3BELFNBQW9CO1FBRXBCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDMUIsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUVwQyx1RUFBdUU7UUFDdkUsTUFBTSxTQUFTLEdBQUcsMEJBQWtCLENBQUMscUJBQXFCLENBQUM7UUFFM0QsbUZBQW1GO1FBQ25GLHlDQUF5QztRQUN6QyxNQUFNLEVBQ0osdUJBQXVCLEVBQ3ZCLHdCQUF3QixFQUN4QixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGlCQUFpQixHQUNsQixHQUFHLElBQUEsNkJBQW1CLEVBQUMsS0FBSyxFQUFFLFNBQVMsQ0FB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