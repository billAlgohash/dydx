"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StarkSignable = void 0;
const constants_1 = require("../constants");
const helpers_1 = require("../helpers");
const crypto_1 = require("../lib/crypto");
const crypto_js_1 = require("../lib/starkware/crypto-js");
/**
 * Base class for a STARK key signable message.
 */
class StarkSignable {
    constructor(message, networkId) {
        this._hashBN = null;
        this.message = message;
        this.networkId = networkId;
        // Sanity check.
        if (!constants_1.COLLATERAL_ASSET_ID_BY_NETWORK_ID[networkId]) {
            throw new Error(`Unknown network ID or unknown collateral asset for network: ${networkId}`);
        }
    }
    /**
     * Return the message hash as a hex string, no 0x prefix.
     */
    async getHash() {
        return (await this.getHashBN()).toString(16).padStart(63, '0');
    }
    async getHashBN() {
        if (this._hashBN === null) {
            this._hashBN = await this.calculateHash();
        }
        return this._hashBN;
    }
    /**
     * Sign the message with the given private key, represented as a hex string or hex string pair.
     */
    async sign(privateKey) {
        const hashBN = await this.getHashBN();
        const ecSignature = await (0, crypto_1.sign)((0, helpers_1.asEcKeyPair)(privateKey), hashBN);
        return (0, helpers_1.serializeSignature)((0, helpers_1.asSimpleSignature)(ecSignature));
    }
    /**
     * Verify the signature is valid for a given public key.
     */
    async verifySignature(signature, publicKey, publicKeyYCoordinate = null) {
        const signatureStruct = (0, helpers_1.deserializeSignature)(signature);
        // If y-coordinate is available, save time by using it, instead of having to infer it.
        if (publicKeyYCoordinate !== null) {
            const ecPublicKey = crypto_js_1.starkEc.keyFromPublic({ x: publicKey, y: publicKeyYCoordinate });
            return (0, crypto_1.verify)(ecPublicKey, await this.getHashBN(), signatureStruct);
        }
        // Return true if the signature is valid for either of the two possible y-coordinates.
        //
        // Compare with:
        // https://github.com/starkware-libs/starkex-resources/blob/1eb84c6a9069950026768013f748016d3bd51d54/crypto/starkware/crypto/signature/signature.py#L151
        const hashBN = await this.getHashBN();
        return ((await (0, crypto_1.verify)((0, helpers_1.asEcKeyPairPublic)(publicKey, false), hashBN, signatureStruct)) ||
            (0, crypto_1.verify)((0, helpers_1.asEcKeyPairPublic)(publicKey, true), hashBN, signatureStruct));
    }
}
exports.StarkSignable = StarkSignable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhcmstc2lnbmFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2lnbmFibGUvc3Rhcmstc2lnbmFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsNENBQWlFO0FBQ2pFLHdDQU1vQjtBQUNwQiwwQ0FHdUI7QUFDdkIsMERBQXFEO0FBTXJEOztHQUVHO0FBQ0gsTUFBc0IsYUFBYTtJQU9qQyxZQUNFLE9BQVUsRUFDVixTQUFvQjtRQUpkLFlBQU8sR0FBYyxJQUFJLENBQUM7UUFNaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFFM0IsZ0JBQWdCO1FBQ2hCLElBQUksQ0FBQyw2Q0FBaUMsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLCtEQUErRCxTQUFTLEVBQUUsQ0FBQyxDQUFDO1NBQzdGO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLE9BQU87UUFDWCxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQVM7UUFDYixJQUFJLElBQUksQ0FBQyxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDM0M7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLElBQUksQ0FDUixVQUE0QjtRQUU1QixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN0QyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUEsYUFBSSxFQUFDLElBQUEscUJBQVcsRUFBQyxVQUFVLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNoRSxPQUFPLElBQUEsNEJBQWtCLEVBQUMsSUFBQSwyQkFBaUIsRUFBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxlQUFlLENBQ25CLFNBQWlCLEVBQ2pCLFNBQWlCLEVBQ2pCLHVCQUFzQyxJQUFJO1FBRTFDLE1BQU0sZUFBZSxHQUFHLElBQUEsOEJBQW9CLEVBQUMsU0FBUyxDQUFDLENBQUM7UUFFeEQsc0ZBQXNGO1FBQ3RGLElBQUksb0JBQW9CLEtBQUssSUFBSSxFQUFFO1lBQ2pDLE1BQU0sV0FBVyxHQUFHLG1CQUFPLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO1lBQ3JGLE9BQU8sSUFBQSxlQUFNLEVBQUMsV0FBVyxFQUFFLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsc0ZBQXNGO1FBQ3RGLEVBQUU7UUFDRixnQkFBZ0I7UUFDaEIsd0pBQXdKO1FBQ3hKLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3RDLE9BQU8sQ0FDTCxDQUFDLE1BQU0sSUFBQSxlQUFNLEVBQUMsSUFBQSwyQkFBaUIsRUFBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBQzVFLElBQUEsZUFBTSxFQUFDLElBQUEsMkJBQWlCLEVBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFlLENBQUMsQ0FDcEUsQ0FBQztJQUNKLENBQUM7Q0FNRjtBQTVFRCxzQ0E0RUMifQ==