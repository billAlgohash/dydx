"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignableWithdrawal = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const constants_1 = require("../constants");
const helpers_1 = require("../helpers");
const crypto_1 = require("../lib/crypto");
const util_1 = require("../lib/util");
const constants_2 = require("./constants");
const stark_signable_1 = require("./stark-signable");
const WITHDRAWAL_PREFIX = 6;
const WITHDRAWAL_PADDING_BITS = 49;
/**
 * Wrapper object to convert a withdrawal, and hash, sign, and verify its signature.
 */
class SignableWithdrawal extends stark_signable_1.StarkSignable {
    static fromWithdrawalWithClientId(withdrawal, networkId) {
        // Make the nonce by hashing the client-provided ID.
        const nonce = (0, helpers_1.nonceFromClientId)(withdrawal.clientId);
        return SignableWithdrawal.fromWithdrawalWithNonce({
            ...withdrawal,
            clientId: undefined,
            nonce,
        }, networkId);
    }
    static fromWithdrawalWithNonce(withdrawal, networkId) {
        const positionId = withdrawal.positionId;
        const nonce = withdrawal.nonce;
        // The withdrawal asset is always the collateral asset.
        const quantumsAmount = (0, helpers_1.toQuantumsExact)(withdrawal.humanAmount, constants_1.COLLATERAL_ASSET);
        // Convert to a Unix timestamp (in hours).
        const expirationEpochHours = (0, helpers_1.isoTimestampToEpochHours)(withdrawal.expirationIsoTimestamp);
        return new SignableWithdrawal({
            positionId,
            nonce,
            quantumsAmount,
            expirationEpochHours,
        }, networkId);
    }
    async calculateHash() {
        const positionIdBn = (0, util_1.decToBn)(this.message.positionId);
        const nonceBn = (0, util_1.decToBn)(this.message.nonce);
        const quantumsAmountBn = (0, util_1.decToBn)(this.message.quantumsAmount);
        const expirationEpochHoursBn = (0, util_1.intToBn)(this.message.expirationEpochHours);
        if (positionIdBn.bitLength() > constants_2.WITHDRAWAL_FIELD_BIT_LENGTHS.positionId) {
            throw new Error('SignableOraclePrice: positionId exceeds max value');
        }
        if (nonceBn.bitLength() > constants_2.WITHDRAWAL_FIELD_BIT_LENGTHS.nonce) {
            throw new Error('SignableOraclePrice: nonce exceeds max value');
        }
        if (quantumsAmountBn.bitLength() > constants_2.WITHDRAWAL_FIELD_BIT_LENGTHS.quantumsAmount) {
            throw new Error('SignableOraclePrice: quantumsAmount exceeds max value');
        }
        if (expirationEpochHoursBn.bitLength() > constants_2.WITHDRAWAL_FIELD_BIT_LENGTHS.expirationEpochHours) {
            throw new Error('SignableOraclePrice: expirationEpochHours exceeds max value');
        }
        const packedWithdrawalBn = new bn_js_1.default(WITHDRAWAL_PREFIX)
            .iushln(constants_2.WITHDRAWAL_FIELD_BIT_LENGTHS.positionId).iadd(positionIdBn)
            .iushln(constants_2.WITHDRAWAL_FIELD_BIT_LENGTHS.nonce).iadd(nonceBn)
            .iushln(constants_2.WITHDRAWAL_FIELD_BIT_LENGTHS.quantumsAmount).iadd(quantumsAmountBn)
            .iushln(constants_2.WITHDRAWAL_FIELD_BIT_LENGTHS.expirationEpochHours).iadd(expirationEpochHoursBn)
            .iushln(WITHDRAWAL_PADDING_BITS);
        return (0, crypto_1.getPedersenHash)((0, util_1.hexToBn)(constants_1.COLLATERAL_ASSET_ID_BY_NETWORK_ID[this.networkId]), packedWithdrawalBn);
    }
    toStarkware() {
        return this.message;
    }
}
exports.SignableWithdrawal = SignableWithdrawal;
SignableWithdrawal.fromWithdrawal = SignableWithdrawal.fromWithdrawalWithClientId; // Alias.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aGRyYXdhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWduYWJsZS93aXRoZHJhd2FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUF1QjtBQUV2Qiw0Q0FHc0I7QUFDdEIsd0NBSW9CO0FBQ3BCLDBDQUFnRDtBQUNoRCxzQ0FJcUI7QUFPckIsMkNBQTJEO0FBQzNELHFEQUFpRDtBQUVqRCxNQUFNLGlCQUFpQixHQUFHLENBQUMsQ0FBQztBQUM1QixNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztBQUVuQzs7R0FFRztBQUNILE1BQWEsa0JBQW1CLFNBQVEsOEJBQWtDO0lBSXhFLE1BQU0sQ0FBQywwQkFBMEIsQ0FDL0IsVUFBa0MsRUFDbEMsU0FBb0I7UUFFcEIsb0RBQW9EO1FBQ3BELE1BQU0sS0FBSyxHQUFHLElBQUEsMkJBQWlCLEVBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELE9BQU8sa0JBQWtCLENBQUMsdUJBQXVCLENBQy9DO1lBQ0UsR0FBRyxVQUFVO1lBQ2IsUUFBUSxFQUFFLFNBQVM7WUFDbkIsS0FBSztTQUNOLEVBQ0QsU0FBUyxDQUNWLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLHVCQUF1QixDQUM1QixVQUErQixFQUMvQixTQUFvQjtRQUVwQixNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDO1FBQ3pDLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7UUFFL0IsdURBQXVEO1FBQ3ZELE1BQU0sY0FBYyxHQUFHLElBQUEseUJBQWUsRUFBQyxVQUFVLENBQUMsV0FBVyxFQUFFLDRCQUFnQixDQUFDLENBQUM7UUFFakYsMENBQTBDO1FBQzFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBQSxrQ0FBd0IsRUFBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUV6RixPQUFPLElBQUksa0JBQWtCLENBQzNCO1lBQ0UsVUFBVTtZQUNWLEtBQUs7WUFDTCxjQUFjO1lBQ2Qsb0JBQW9CO1NBQ3JCLEVBQ0QsU0FBUyxDQUNWLENBQUM7SUFDSixDQUFDO0lBRVMsS0FBSyxDQUFDLGFBQWE7UUFDM0IsTUFBTSxZQUFZLEdBQUcsSUFBQSxjQUFPLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0RCxNQUFNLE9BQU8sR0FBRyxJQUFBLGNBQU8sRUFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBQSxjQUFPLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM5RCxNQUFNLHNCQUFzQixHQUFHLElBQUEsY0FBTyxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUUxRSxJQUFJLFlBQVksQ0FBQyxTQUFTLEVBQUUsR0FBRyx3Q0FBNEIsQ0FBQyxVQUFVLEVBQUU7WUFDdEUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsSUFBSSxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsd0NBQTRCLENBQUMsS0FBSyxFQUFFO1lBQzVELE1BQU0sSUFBSSxLQUFLLENBQUMsOENBQThDLENBQUMsQ0FBQztTQUNqRTtRQUNELElBQUksZ0JBQWdCLENBQUMsU0FBUyxFQUFFLEdBQUcsd0NBQTRCLENBQUMsY0FBYyxFQUFFO1lBQzlFLE1BQU0sSUFBSSxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQztTQUMxRTtRQUNELElBQ0Usc0JBQXNCLENBQUMsU0FBUyxFQUFFLEdBQUcsd0NBQTRCLENBQUMsb0JBQW9CLEVBQ3RGO1lBQ0EsTUFBTSxJQUFJLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxDQUFDO1NBQ2hGO1FBRUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLGVBQUUsQ0FBQyxpQkFBaUIsQ0FBQzthQUNqRCxNQUFNLENBQUMsd0NBQTRCLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQzthQUNsRSxNQUFNLENBQUMsd0NBQTRCLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUN4RCxNQUFNLENBQUMsd0NBQTRCLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2FBQzFFLE1BQU0sQ0FBQyx3Q0FBNEIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQzthQUN0RixNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUVuQyxPQUFPLElBQUEsd0JBQWUsRUFDcEIsSUFBQSxjQUFPLEVBQUMsNkNBQWlDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQzFELGtCQUFrQixDQUNuQixDQUFDO0lBQ0osQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7QUFoRkgsZ0RBaUZDO0FBL0VRLGlDQUFjLEdBQUcsa0JBQWtCLENBQUMsMEJBQTBCLENBQUMsQ0FBQyxTQUFTIn0=