"use strict";
/**
 * Unit tests for keys.ts.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect_1 = __importDefault(require("expect"));
const util_1 = require("../src/lib/util");
// Module under test.
const keys_1 = require("../src/keys");
const HEX_32_BYTES_LOWER_NO_PREFIX_RE = /^[0-9a-f]{64}$/;
describe('Key generation functions', () => {
    describe('generateKeyPair()', () => {
        it('generates a key pair', () => {
            const keyPair = (0, keys_1.generateKeyPairUnsafe)();
            (0, expect_1.default)(keyPair.publicKey).toMatch(HEX_32_BYTES_LOWER_NO_PREFIX_RE);
            (0, expect_1.default)(keyPair.privateKey).toMatch(HEX_32_BYTES_LOWER_NO_PREFIX_RE);
        });
        it('generates different key pairs', () => {
            (0, expect_1.default)((0, keys_1.generateKeyPairUnsafe)()).not.toEqual((0, keys_1.generateKeyPairUnsafe)());
        });
    });
    describe('keyPairFromData()', () => {
        it('generates a key pair deterministically from buffer input', () => {
            const entropy = (0, util_1.randomBuffer)(32);
            (0, expect_1.default)((0, keys_1.keyPairFromData)(entropy)).toEqual((0, keys_1.keyPairFromData)(entropy));
        });
        it('generates different key pairs from short data', () => {
            (0, expect_1.default)((0, keys_1.keyPairFromData)(Buffer.from([0]))).not.toEqual((0, keys_1.keyPairFromData)(Buffer.from([1])));
            (0, expect_1.default)((0, keys_1.keyPairFromData)(Buffer.from([0]))).not.toEqual((0, keys_1.keyPairFromData)(Buffer.from([2])));
            (0, expect_1.default)((0, keys_1.keyPairFromData)(Buffer.from([0]))).not.toEqual((0, keys_1.keyPairFromData)(Buffer.from([3])));
        });
        it('generates different key pairs from long data', () => {
            const entropy = (0, util_1.randomBuffer)(200);
            const entropy2 = Buffer.from(entropy);
            entropy2[31] = (entropy[31] + 1) % 0x100;
            (0, expect_1.default)((0, keys_1.keyPairFromData)(entropy)).toEqual((0, keys_1.keyPairFromData)(entropy));
            (0, expect_1.default)((0, keys_1.keyPairFromData)(entropy)).not.toEqual((0, keys_1.keyPairFromData)(entropy2));
        });
        it('throws if provided an empty buffer', () => {
            (0, expect_1.default)(() => (0, keys_1.keyPairFromData)(Buffer.from([]))).toThrow('Empty buffer');
        });
        it('generates the expected key pairs', () => {
            // Make sure that the mapping from buffer to key pair doesn't change unexpectedly.
            (0, expect_1.default)((0, keys_1.keyPairFromData)(Buffer.from('0'))).toEqual({
                publicKey: '069a33d37101d7089b606f92e4b41553c237a474ad9d6f62eeb6708415f98f4d',
                publicKeyYCoordinate: '0717e78b98a53888aa7685b91137fa01b9336ce7d25f874dbfb8d752c6ac610d',
                privateKey: '002242959533856f2a03f3c7d9431e28ef4fe5cb2a15038c37f1d76d35dc508b',
            });
            (0, expect_1.default)((0, keys_1.keyPairFromData)(Buffer.from('a'))).toEqual({
                publicKey: '01b831960e94e1825a1f88a02906662d84696fed516304bd1523ae8ba354affb',
                publicKeyYCoordinate: '078a856dfe1ee326ba0446a1c134bf148a76d73523dae91876bae923405b87eb',
                privateKey: '01d61128b46faa109512e0e00fe9adf5ff52047ed61718eeeb7c0525dfcd2f8e',
            });
            (0, expect_1.default)((0, keys_1.keyPairFromData)(Buffer.from('really long input data for key generation with the keyPairFromData() function'))).toEqual({
                publicKey: '0179decc2752db9934392f19d74a13e3068f285caf55e9563c8ee881f022aaa2',
                publicKeyYCoordinate: '018fe7e4e4ca452cf45ee74b34f736e547bad2a6a60eba41384401a523d67a7e',
                privateKey: '007c4946831bde597b73f1d5721af9c67731eafeb75c1b8e92ac457a61819a29',
            });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5cy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vX190ZXN0c19fL2tleXMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7Ozs7O0FBRUgsb0RBQTRCO0FBSzVCLDBDQUErQztBQUUvQyxxQkFBcUI7QUFDckIsc0NBR3FCO0FBRXJCLE1BQU0sK0JBQStCLEdBQUcsZ0JBQWdCLENBQUM7QUFFekQsUUFBUSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtJQUV4QyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBRWpDLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLEVBQUU7WUFDOUIsTUFBTSxPQUFPLEdBQVksSUFBQSw0QkFBcUIsR0FBRSxDQUFDO1lBQ2pELElBQUEsZ0JBQU0sRUFBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUFDLENBQUM7WUFDbkUsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7WUFDdkMsSUFBQSxnQkFBTSxFQUNKLElBQUEsNEJBQXFCLEdBQUUsQ0FDeEIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUNYLElBQUEsNEJBQXFCLEdBQUUsQ0FDeEIsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBRWpDLEVBQUUsQ0FBQywwREFBMEQsRUFBRSxHQUFHLEVBQUU7WUFDbEUsTUFBTSxPQUFPLEdBQUcsSUFBQSxtQkFBWSxFQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2pDLElBQUEsZ0JBQU0sRUFBQyxJQUFBLHNCQUFlLEVBQUMsT0FBTyxDQUFDLENBQUMs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