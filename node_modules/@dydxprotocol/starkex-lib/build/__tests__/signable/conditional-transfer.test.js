"use strict";
/**
 * Unit tests for signable/conditional-transfer.ts.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect_1 = __importDefault(require("expect"));
const lodash_1 = __importDefault(require("lodash"));
const types_1 = require("../../src/types");
const keys_1 = require("../../src/keys");
const util_1 = require("../util");
// Module under test.
const conditional_transfer_1 = require("../../src/signable/conditional-transfer");
// Mock params.
const mockKeyPair = {
    publicKey: '3b865a18323b8d147a12c556bfb1d502516c325b1477a23ba6c77af31f020fd',
    privateKey: '58c7d5a90b1776bde86ebac077e053ed85b0f7164f53b080304a531947f46e3',
};
const mockParams = {
    senderPositionId: '12345',
    receiverPositionId: '67890',
    receiverPublicKey: '05135ef87716b0faecec3ba672d145a6daad0aa46437c365d490022115aba674',
    humanAmount: '49.478023',
    expirationIsoTimestamp: '2020-09-17T04:15:55.028Z',
    clientId: 'This is an ID that the client came up with to describe this transfer',
    factRegistryAddress: '0x12aa12aa12aa12aa12aa12aa12aa12aa12aa12aa',
    fact: '0x12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff',
};
const mockSignature = ('01b437ac15bb89417edcfb2d304c3efad6256def3cc24e60c4980a88d08cb953' +
    '045df9fbe4a4895409e1011c60be439d65c1a2637013b74a19cb5b8ab62db434');
describe('SignableConditionalTransfer', () => {
    describe('verifySignature()', () => {
        it('returns true for a valid signature', async () => {
            const result = await conditional_transfer_1.SignableConditionalTransfer.fromTransfer(mockParams, types_1.NetworkId.GOERLI)
                .verifySignature(mockSignature, mockKeyPair.publicKey);
            (0, expect_1.default)(result).toBe(true);
        });
        it('returns false for an invalid signature', async () => {
            // Mutate a single character in r.
            const badSignatureR = (0, util_1.mutateHexStringAt)(mockSignature, 1);
            const result1 = await conditional_transfer_1.SignableConditionalTransfer.fromTransfer(mockParams, types_1.NetworkId.GOERLI)
                .verifySignature(badSignatureR, mockKeyPair.publicKey);
            (0, expect_1.default)(result1).toBe(false);
            // Mutate a single character in s.
            const badSignatureS = (0, util_1.mutateHexStringAt)(mockSignature, 65);
            const result2 = await conditional_transfer_1.SignableConditionalTransfer.fromTransfer(mockParams, types_1.NetworkId.GOERLI)
                .verifySignature(badSignatureS, mockKeyPair.publicKey);
            (0, expect_1.default)(result2).toBe(false);
        });
    });
    describe('sign()', () => {
        it('signs a transfer', async () => {
            const signature = await conditional_transfer_1.SignableConditionalTransfer.fromTransfer(mockParams, types_1.NetworkId.GOERLI).sign(mockKeyPair.privateKey);
            (0, expect_1.default)(signature).toEqual(mockSignature);
        });
        it('generates a different signature when the client ID is different', async () => {
            const transfer = {
                ...mockParams,
                clientId: `${mockParams.clientId}!`,
            };
            const signature = await conditional_transfer_1.SignableConditionalTransfer.fromTransfer(transfer, types_1.NetworkId.GOERLI)
                .sign(mockKeyPair.privateKey);
            (0, expect_1.default)(signature).not.toEqual(mockSignature);
        });
        it('generates a different signature when the receiver position ID is different', async () => {
            const transfer = {
                ...mockParams,
                receiverPositionId: (Number.parseInt(mockParams.receiverPositionId, 10) + 1).toString(),
            };
            const signature = await conditional_transfer_1.SignableConditionalTransfer.fromTransfer(transfer, types_1.NetworkId.GOERLI)
                .sign(mockKeyPair.privateKey);
            (0, expect_1.default)(signature).not.toEqual(mockSignature);
        });
    });
    describe('toStarkware()', () => {
        it('converts human amounts to quantum amounts and converts expiration to hours', () => {
            const starkwareConditionalTransfer = (conditional_transfer_1.SignableConditionalTransfer.fromTransfer(mockParams, types_1.NetworkId.GOERLI).toStarkware());
            (0, expect_1.default)(starkwareConditionalTransfer.quantumsAmount).toEqual('49478023');
            (0, expect_1.default)(starkwareConditionalTransfer.expirationEpochHours).toBe(444533);
        });
    });
    it('end-to-end', async () => {
        // Repeat some number of times.
        await Promise.all(lodash_1.default.range(3).map(async () => {
            const keyPair = (0, keys_1.generateKeyPairUnsafe)();
            const signable = conditional_transfer_1.SignableConditionalTransfer.fromTransfer(mockParams, types_1.NetworkId.GOERLI);
            const signature = await signable.sign(keyPair.privateKey);
            // Expect to be valid when verifying with the right public key.
            (0, expect_1.default)(await signable.verifySignature(signature, keyPair.publicKey)).toBe(true);
            // Expect to be invalid when verifying with a different public key.
            (0, expect_1.default)(await signable.verifySignature(signature, mockKeyPair.publicKey)).toBe(false);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWwtdHJhbnNmZXIudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL19fdGVzdHNfXy9zaWduYWJsZS9jb25kaXRpb25hbC10cmFuc2Zlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7Ozs7QUFFSCxvREFBNEI7QUFDNUIsb0RBQXVCO0FBRXZCLDJDQUt5QjtBQUN6Qix5Q0FBdUQ7QUFDdkQsa0NBQTRDO0FBRTVDLHFCQUFxQjtBQUNyQixrRkFBc0Y7QUFFdEYsZUFBZTtBQUNmLE1BQU0sV0FBVyxHQUFZO0lBQzNCLFNBQVMsRUFBRSxpRUFBaUU7SUFDNUUsVUFBVSxFQUFFLGlFQUFpRTtDQUM5RSxDQUFDO0FBQ0YsTUFBTSxVQUFVLEdBQThCO0lBQzVDLGdCQUFnQixFQUFFLE9BQU87SUFDekIsa0JBQWtCLEVBQUUsT0FBTztJQUMzQixpQkFBaUIsRUFBRSxrRUFBa0U7SUFDckYsV0FBVyxFQUFFLFdBQVc7SUFDeEIsc0JBQXNCLEVBQUUsMEJBQTBCO0lBQ2xELFFBQVEsRUFBRSxzRUFBc0U7SUFDaEYsbUJBQW1CLEVBQUUsNENBQTRDO0lBQ2pFLElBQUksRUFBRSxvRUFBb0U7Q0FDM0UsQ0FBQztBQUNGLE1BQU0sYUFBYSxHQUFHLENBQ3BCLGtFQUFrRTtJQUNsRSxrRUFBa0UsQ0FDbkUsQ0FBQztBQUVGLFFBQVEsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7SUFFM0MsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUVqQyxFQUFFLENBQUMsb0NBQW9DLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbEQsTUFBTSxNQUFNLEdBQUcsTUFBTSxrREFBMkIsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLGlCQUFTLENBQUMsTUFBTSxDQUFDO2lCQUN4RixlQUFlLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6RCxJQUFBLGdCQUFNLEVB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