"use strict";
/**
 * Unit tests for signable/oracle-price.ts.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect_1 = __importDefault(require("expect"));
const lodash_1 = __importDefault(require("lodash"));
const types_1 = require("../../src/types");
const keys_1 = require("../../src/keys");
const util_1 = require("../util");
// Module under test.
const oracle_price_1 = require("../../src/signable/oracle-price");
const src_1 = require("../../src");
// Mock params.
const mockKeyPair = {
    publicKey: '1895a6a77ae14e7987b9cb51329a5adfb17bd8e7c638f92d6892d76e51cebcf',
    privateKey: '178047D3869489C055D7EA54C014FFB834A069C9595186ABE04EA4D1223A03F',
};
const mockOraclePrice = {
    market: types_1.DydxMarket.BTC_USD,
    oracleName: 'dYdX',
    humanPrice: '11512.34',
    isoTimestamp: '2020-01-01T00:00:00.000Z',
};
const mockSignature = ('020b64c5ead744a9a39bb20cee8193e15958d2f5bc065a3a31a8245d800907ae' +
    '0043e5681d7fd1e0720cc578e3d076ea29dbfe902f30445da8aa74bd112aa710');
describe('SignableOraclePrice', () => {
    describe('verifySignature()', () => {
        it('returns true for a valid signature', async () => {
            const result = await oracle_price_1.SignableOraclePrice
                .fromPriceWithMarket(mockOraclePrice, types_1.NetworkId.GOERLI)
                .verifySignature(mockSignature, mockKeyPair.publicKey);
            (0, expect_1.default)(result).toBe(true);
        });
        it('returns false for an invalid signature', async () => {
            // Mutate a single character in r.
            await Promise.all(lodash_1.default.range(1, 4).map(async (i) => {
                const badSignature = (0, util_1.mutateHexStringAt)(mockSignature, i);
                const result = await oracle_price_1.SignableOraclePrice
                    .fromPriceWithMarket(mockOraclePrice, types_1.NetworkId.GOERLI)
                    .verifySignature(badSignature, mockKeyPair.publicKey);
                (0, expect_1.default)(result).toBe(false);
            }));
            // Mutate a single character in s.
            await Promise.all(lodash_1.default.range(1, 4).map(async (i) => {
                const badSignature = (0, util_1.mutateHexStringAt)(mockSignature, i + 64);
                const result = await oracle_price_1.SignableOraclePrice
                    .fromPriceWithMarket(mockOraclePrice, types_1.NetworkId.GOERLI)
                    .verifySignature(badSignature, mockKeyPair.publicKey);
                (0, expect_1.default)(result).toBe(false);
            }));
        });
    });
    describe('sign()', () => {
        it('signs an oracle price, with a market', async () => {
            const signature = await oracle_price_1.SignableOraclePrice
                .fromPriceWithMarket(mockOraclePrice, types_1.NetworkId.GOERLI)
                .sign(mockKeyPair.privateKey);
            (0, expect_1.default)(signature).toEqual(mockSignature);
        });
        it('signs an oracle price, with an asset name', async () => {
            const signature = await oracle_price_1.SignableOraclePrice
                .fromPriceWithAssetName({
                ...mockOraclePrice,
                assetName: (0, src_1.getSignedAssetName)(mockOraclePrice.market),
            }, types_1.NetworkId.GOERLI)
                .sign(mockKeyPair.privateKey);
            (0, expect_1.default)(signature).toEqual(mockSignature);
        });
        it('generates a different signature when the market is different', async () => {
            const oraclePrice = {
                ...mockOraclePrice,
                market: types_1.DydxMarket.ETH_USD,
            };
            const signature = await oracle_price_1.SignableOraclePrice
                .fromPriceWithMarket(oraclePrice, types_1.NetworkId.GOERLI)
                .sign(mockKeyPair.privateKey);
            (0, expect_1.default)(signature).not.toEqual(mockSignature);
        });
        it('generates a different signature when the oracle name is different', async () => {
            const oraclePrice = {
                ...mockOraclePrice,
                oracleName: 'Other',
            };
            const signature = await oracle_price_1.SignableOraclePrice
                .fromPriceWithMarket(oraclePrice, types_1.NetworkId.GOERLI)
                .sign(mockKeyPair.privateKey);
            (0, expect_1.default)(signature).not.toEqual(mockSignature);
        });
        it('generates a different signature when the timestamp is different', async () => {
            const oraclePrice = {
                ...mockOraclePrice,
                isoTimestamp: new Date().toISOString(),
            };
            const signature = await oracle_price_1.SignableOraclePrice
                .fromPriceWithMarket(oraclePrice, types_1.NetworkId.GOERLI)
                .sign(mockKeyPair.privateKey);
            (0, expect_1.default)(signature).not.toEqual(mockSignature);
        });
        it('throws an error if the oracle name is too long', () => {
            const oraclePrice = {
                ...mockOraclePrice,
                oracleName: 'Other2',
            };
            (0, expect_1.default)(() => oracle_price_1.SignableOraclePrice.fromPriceWithMarket(oraclePrice, types_1.NetworkId.GOERLI)).toThrow('Input does not fit in numBits=40 bits');
        });
    });
    it('end-to-end', async () => {
        // Repeat some number of times.
        await Promise.all(lodash_1.default.range(3).map(async () => {
            const keyPair = (0, keys_1.generateKeyPairUnsafe)();
            const signableOraclePrice = oracle_price_1.SignableOraclePrice.fromPriceWithMarket(mockOraclePrice, types_1.NetworkId.GOERLI);
            const signature = await signableOraclePrice.sign(keyPair.privateKey);
            // Expect to be valid when verifying with the right public key.
            (0, expect_1.default)(await signableOraclePrice.verifySignature(signature, keyPair.publicKey)).toBe(true);
            // Expect to be invalid when verifying with a different public key.
            (0, expect_1.default)(await signableOraclePrice.verifySignature(signature, mockKeyPair.publicKey)).toBe(false);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JhY2xlLXByaWNlLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vc2lnbmFibGUvb3JhY2xlLXByaWNlLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOzs7OztBQUVILG9EQUE0QjtBQUM1QixvREFBdUI7QUFFdkIsMkNBS3lCO0FBQ3pCLHlDQUF1RDtBQUN2RCxrQ0FBNEM7QUFFNUMscUJBQXFCO0FBQ3JCLGtFQUFzRTtBQUN0RSxtQ0FBK0M7QUFFL0MsZUFBZTtBQUNmLE1BQU0sV0FBVyxHQUFZO0lBQzNCLFNBQVMsRUFBRSxpRUFBaUU7SUFDNUUsVUFBVSxFQUFFLGlFQUFpRTtDQUM5RSxDQUFDO0FBQ0YsTUFBTSxlQUFlLEdBQTBCO0lBQzdDLE1BQU0sRUFBRSxrQkFBVSxDQUFDLE9BQU87SUFDMUIsVUFBVSxFQUFFLE1BQU07SUFDbEIsVUFBVSxFQUFFLFVBQVU7SUFDdEIsWUFBWSxFQUFFLDBCQUEwQjtDQUN6QyxDQUFDO0FBQ0YsTUFBTSxhQUFhLEdBQUcsQ0FDcEIsa0VBQWtFO0lBQ2xFLGtFQUFrRSxDQUNuRSxDQUFDO0FBRUYsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUVuQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBRWpDLEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLGtDQUFtQjtpQkFDckMsbUJBQW1CLENBQUMsZUFBZSxFQUFFLGlCQUFTLENBQUMsTUFBTSxDQUFDO2lCQUN0RCxlQUFlLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6RCxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFF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