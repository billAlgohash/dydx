"use strict";
/* eslint-disable @typescript-eslint/no-unused-expressions */
/**
 * Test caching of pedersen hashes.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect_1 = __importDefault(require("expect"));
const proxyquire_1 = __importDefault(require("proxyquire"));
const sinon_1 = __importDefault(require("sinon"));
const starkware_1 = require("../../src/lib/starkware");
const types_1 = require("../../src/types");
proxyquire_1.default.noPreserveCache();
// Mocks.
let mockPedersen;
let proxyquiredCrypto;
let proxyquiredHashes;
let mocks;
// Mock data.
const mockTransfer = {
    senderPositionId: '12345',
    receiverPositionId: '67890',
    receiverPublicKey: '05135ef87716b0faecec3ba672d145a6daad0aa46437c365d490022115aba674',
    humanAmount: '49.478023',
    expirationIsoTimestamp: '2020-09-17T04:15:55.028Z',
    clientId: 'This is an ID that the client came up with to describe this transfer',
};
const mockConditionalTransfer = {
    ...mockTransfer,
    factRegistryAddress: '0x12aa12aa12aa12aa12aa12aa12aa12aa12aa12aa',
    fact: '0x12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff12ff',
};
const mockOrder = {
    positionId: '12345',
    humanSize: '145.0005',
    limitFee: '0.125',
    market: types_1.DydxMarket.ETH_USD,
    side: types_1.StarkwareOrderSide.BUY,
    expirationIsoTimestamp: '2020-09-17T04:15:55.028Z',
    humanPrice: '350.00067',
    clientId: 'This is an ID that the client came up with to describe this order',
};
const mockWithdrawal = {
    positionId: '12345',
    humanAmount: '49.478023',
    expirationIsoTimestamp: '2020-09-17T04:15:55.028Z',
    clientId: 'This is an ID that the client came up with to describe this withdrawal',
};
describe('Pedersen hashes', () => {
    beforeEach(() => {
        // Reload the hashes module fresh each time, resetting the cache.
        mockPedersen = sinon_1.default.spy(starkware_1.pedersen);
        proxyquiredCrypto = (0, proxyquire_1.default)('../../src/lib/crypto/proxies', {
            '../starkware': {
                pedersen: mockPedersen,
            },
        });
        proxyquiredHashes = (0, proxyquire_1.default)('../../src/signable/hashes', {
            '../lib/crypto': proxyquiredCrypto,
        });
        mocks = {
            '../lib/crypto': proxyquiredCrypto,
            './hashes': proxyquiredHashes,
        };
    });
    it('conditional transfer: 5 hashes the first time, and 4 thereafter', async () => {
        const { SignableConditionalTransfer } = ((0, proxyquire_1.default)('../../src/signable/conditional-transfer', mocks));
        await SignableConditionalTransfer.fromTransfer(mockConditionalTransfer, types_1.NetworkId.GOERLI).getHash();
        (0, expect_1.default)(mockPedersen.callCount).toBe(5);
        // Expect fewer hashes the second time.
        mockPedersen.resetHistory();
        await SignableConditionalTransfer.fromTransfer(mockConditionalTransfer, types_1.NetworkId.GOERLI).getHash();
        (0, expect_1.default)(mockPedersen.callCount).toBe(4);
    });
    it('order: 4 hashes the first time, and 2 thereafter', async () => {
        const { SignableOrder } = (0, proxyquire_1.default)('../../src/signable/order', mocks);
        await SignableOrder.fromOrder(mockOrder, types_1.NetworkId.GOERLI).getHash();
        (0, expect_1.default)(mockPedersen.callCount).toBe(4);
        // Expect fewer hashes the second time.
        mockPedersen.resetHistory();
        await SignableOrder.fromOrder(mockOrder, types_1.NetworkId.GOERLI).getHash();
        (0, expect_1.default)(mockPedersen.callCount).toBe(2);
    });
    it('transfer: 4 hashes the first time, and 3 thereafter', async () => {
        const { SignableTransfer } = ((0, proxyquire_1.default)('../../src/signable/transfer', mocks));
        await SignableTransfer.fromTransfer(mockTransfer, types_1.NetworkId.GOERLI).getHash();
        (0, expect_1.default)(mockPedersen.callCount).toBe(4);
        // Expect fewer hashes the second time.
        mockPedersen.resetHistory();
        await SignableTransfer.fromTransfer(mockTransfer, types_1.NetworkId.GOERLI).getHash();
        (0, expect_1.default)(mockPedersen.callCount).toBe(3);
    });
    it('withdrawal: 1 hash the first time, and 1 thereafter', async () => {
        const { SignableWithdrawal } = (0, proxyquire_1.default)('../../src/signable/withdrawal', mocks);
        await SignableWithdrawal.fromWithdrawal(mockWithdrawal, types_1.NetworkId.GOERLI).getHash();
        (0, expect_1.default)(mockPedersen.callCount).toBe(1);
    });
    // slowing down rest of test suite and will never be changed
    describe.skip('after pre-computing hashes', () => {
        beforeEach(async () => {
            await proxyquiredHashes.preComputeHashes(types_1.NetworkId.GOERLI);
            mockPedersen.resetHistory();
        });
        it('conditional transfer: 4 hashes', async () => {
            const { SignableConditionalTransfer } = ((0, proxyquire_1.default)('../../src/signable/conditional-transfer', mocks));
            await SignableConditionalTransfer.fromTransfer(mockConditionalTransfer, types_1.NetworkId.GOERLI).getHash();
            (0, expect_1.default)(mockPedersen.callCount).toBe(4);
        });
        it('order: 2 hashes', async () => {
            const { SignableOrder } = (0, proxyquire_1.default)('../../src/signable/order', mocks);
            await SignableOrder.fromOrder(mockOrder, types_1.NetworkId.GOERLI).getHash();
            (0, expect_1.default)(mockPedersen.callCount).toBe(2);
        });
        it('conditional transfer: 3 hashes', async () => {
            const { SignableTransfer } = ((0, proxyquire_1.default)('../../src/signable/transfer', mocks));
            await SignableTransfer.fromTransfer(mockTransfer, types_1.NetworkId.GOERLI).getHash();
            (0, expect_1.default)(mockPedersen.callCount).toBe(3);
        });
        it('withdrawal: 1 hash', async () => {
            const { SignableWithdrawal } = (0, proxyquire_1.default)('../../src/signable/withdrawal', mocks);
            await SignableWithdrawal.fromWithdrawal(mockWithdrawal, types_1.NetworkId.GOERLI).getHash();
            (0, expect_1.default)(mockPedersen.callCount).toBe(1);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaGVzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vc2lnbmFibGUvaGFzaGVzLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZEQUE2RDtBQUM3RDs7R0FFRzs7Ozs7QUFFSCxvREFBNEI7QUFDNUIsNERBQW9DO0FBQ3BDLGtEQUEwQjtBQUcxQix1REFBbUQ7QUFjbkQsMkNBUXlCO0FBRXpCLG9CQUFVLENBQUMsZUFBZSxFQUFFLENBQUM7QUFFN0IsU0FBUztBQUNULElBQUksWUFBNEIsQ0FBQztBQUNqQyxJQUFJLGlCQUFzQyxDQUFDO0FBQzNDLElBQUksaUJBQXNDLENBQUM7QUFDM0MsSUFBSSxLQUFVLENBQUM7QUFFZixhQUFhO0FBQ2IsTUFBTSxZQUFZLEdBQW1CO0lBQ25DLGdCQUFnQixFQUFFLE9BQU87SUFDekIsa0JBQWtCLEVBQUUsT0FBTztJQUMzQixpQkFBaUIsRUFBRSxrRUFBa0U7SUFDckYsV0FBVyxFQUFFLFdBQVc7SUFDeEIsc0JBQXNCLEVBQUUsMEJBQTBCO0lBQ2xELFFBQVEsRUFBRSxzRUFBc0U7Q0FDakYsQ0FBQztBQUNGLE1BQU0sdUJBQXVCLEdBQThCO0lBQ3pELEdBQUcsWUFBWTtJQUNmLG1CQUFtQixFQUFFLDRDQUE0QztJQUNqRSxJQUFJLEVBQUUsb0VBQW9FO0NBQzNFLENBQUM7QUFDRixNQUFNLFNBQVMsR0FBc0I7SUFDbkMsVUFBVSxFQUFFLE9BQU87SUFDbkIsU0FBUyxFQUFFLFVBQVU7SUFDckIsUUFBUSxFQUFFLE9BQU87SUFDakIsTUFBTSxFQUFFLGtCQUFVLENBQUMsT0FBTztJQUMxQixJQUFJLEVBQUUsMEJBQWtCLENBQUMsR0FBRztJQUM1QixzQkFBc0IsRUFBRSwwQkFBMEI7SUFDbEQsVUFBVSxFQUFFLFdBQVc7SUFDdkIsUUFBUSxFQUFFLG1FQUFtRTtDQUM5RSxDQUFDO0FBQ0YsTUFBTSxjQUFjLEdBQTJCO0lBQzdDLFVBQVUsRUFB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