"use strict";
/**
 * Unit tests for signable/crypto.ts.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const expect_1 = __importDefault(require("expect"));
const proxies_1 = require("../../../src/lib/crypto/proxies");
const starkware_1 = require("../../../src/lib/starkware");
describe('Cryptographic function wrappers for STARK signable objects', () => {
    it('allows setting the hash function implementation', async () => {
        await (0, proxies_1.setGlobalStarkHashImplementation)(starkware_1.pedersen);
    });
    it('allows setting the signing function implementation', async () => {
        await (0, proxies_1.setGlobalStarkSigningImplementation)(starkware_1.sign);
    });
    it('allows setting the verification function implementation', async () => {
        await (0, proxies_1.setGlobalStarkVerificationImplementation)(starkware_1.verify);
    });
    it('throws if invalid hash function provided', async () => {
        await (0, expect_1.default)((0, proxies_1.setGlobalStarkHashImplementation)((a, b) => a.add(b))).rejects.toThrow('Sanity check failed');
    });
    it('throws if invalid signing function provided', async () => {
        await (0, expect_1.default)((0, proxies_1.setGlobalStarkSigningImplementation)((_key, _message) => ({
            r: new bn_js_1.default(1),
            s: new bn_js_1.default(2),
        }))).rejects.toThrow('Sanity check failed');
    });
    it('throws if invalid verification function provided (returning false)', async () => {
        await (0, expect_1.default)((0, proxies_1.setGlobalStarkVerificationImplementation)((_key, _message, _signature) => false)).rejects.toThrow('Sanity check failed');
    });
    it('throws if invalid verification function provided (returning true)', async () => {
        await (0, expect_1.default)((0, proxies_1.setGlobalStarkVerificationImplementation)((_key, _message, _signature) => true)).rejects.toThrow('Sanity check failed');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJveGllcy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vX190ZXN0c19fL2xpYi9jcnlwdG8vcHJveGllcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7R0FFRzs7Ozs7QUFFSCxrREFBdUI7QUFFdkIsb0RBQTRCO0FBRTVCLDZEQUl5QztBQUN6QywwREFJb0M7QUFHcEMsUUFBUSxDQUFDLDREQUE0RCxFQUFFLEdBQUcsRUFBRTtJQUUxRSxFQUFFLENBQUMsaURBQWlELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0QsTUFBTSxJQUFBLDBDQUFnQyxFQUFDLG9CQUFRLENBQUMsQ0FBQztJQUNuRCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxvREFBb0QsRUFBRSxLQUFLLElBQUksRUFBRTtRQUNsRSxNQUFNLElBQUEsNkNBQW1DLEVBQUMsZ0JBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlEQUF5RCxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ3ZFLE1BQU0sSUFBQSxrREFBd0MsRUFBQyxrQkFBTSxDQUFDLENBQUM7SUFDekQsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDeEQsTUFBTSxJQUFBLGdCQUFNLEVBQ1YsSUFBQSwwQ0FBZ0MsRUFDOUIsQ0FBQyxDQUFLLEVBQUUsQ0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUMzQixDQUNGLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZDQUE2QyxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQzNELE1BQU0sSUFBQSxnQkFBTSxFQUNWLElBQUEsNkNBQW1DLEVBQ2pDLENBQUMsSUFBeUIsRUFBRSxRQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDNUMsQ0FBQyxFQUFFLElBQUksZUFBRSxDQUFDLENBQUMsQ0FBQztZQUNaLENBQUMsRUFBRSxJQUFJLGVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDYixDQUEwQixDQUM1QixDQUNGLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9FQUFvRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2xGLE1BQU0sSUFBQSxnQkFBTSxFQUNWLElBQUEsa0RBQXdDLEVBQ3RDLENBQUMsSUFBeUIsRUFBRSxRQUFZLEVBQUUsVUFBMkIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUNoRixDQUNGLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG1FQUFtRSxFQUFFLEtBQUssSUFBSSxFQUFFO1FBQ2pGLE1BQU0sSUFBQSxnQkFBTSxFQUNWLElBQUEsa0RBQXdDLEVBQ3RDLENBQUMsSUFBeUIsRUFBRSxRQUFZLEVBQUUsVUFBMkIsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUMvRSxDQUNGLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzNDLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMifQ==