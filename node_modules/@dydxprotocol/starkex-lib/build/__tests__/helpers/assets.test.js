"use strict";
/**
 * Unit tests for helpers/assets.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect_1 = __importDefault(require("expect"));
const constants_1 = require("../../src/constants");
const types_1 = require("../../src/types");
// Module under test.
const assets_1 = require("../../src/helpers/assets");
describe('assets helpers', () => {
    describe('fromQuantums()', () => {
        it('converts a number of quantums to a human-readable amount', () => {
            (0, expect_1.default)((0, assets_1.fromQuantums)('1000', types_1.DydxAsset.ETH)).toBe('0.000001');
        });
        it('throws if the asset is unknown', () => {
            (0, expect_1.default)(() => {
                (0, assets_1.fromQuantums)('1000', 'UNKNOWN');
            }).toThrow('Unknown asset');
        });
    });
    describe('getStarkwareAmounts()', () => {
        it('converts order params to Starkware order params', () => {
            (0, expect_1.default)((0, assets_1.getStarkwareAmounts)({
                market: types_1.DydxMarket.BTC_USD,
                side: types_1.StarkwareOrderSide.SELL,
                humanSize: '250.0000000001',
                humanPrice: '1.23456789',
            }, types_1.NetworkId.GOERLI)).toStrictEqual({
                quantumsAmountSynthetic: '2500000000001',
                quantumsAmountCollateral: '308641972',
                assetIdSynthetic: constants_1.SYNTHETIC_ASSET_ID_MAP[types_1.DydxAsset.BTC],
                assetIdCollateral: constants_1.COLLATERAL_ASSET_ID_BY_NETWORK_ID[types_1.NetworkId.GOERLI],
                isBuyingSynthetic: false,
            });
        });
        it('converts order params with a quote amount instead of price', () => {
            (0, expect_1.default)((0, assets_1.getStarkwareAmounts)({
                market: types_1.DydxMarket.BTC_USD,
                side: types_1.StarkwareOrderSide.SELL,
                humanSize: '250.0000000001',
                humanQuoteAmount: '308.641972',
            }, types_1.NetworkId.GOERLI)).toStrictEqual({
                quantumsAmountSynthetic: '2500000000001',
                quantumsAmountCollateral: '308641972',
                assetIdSynthetic: constants_1.SYNTHETIC_ASSET_ID_MAP[types_1.DydxAsset.BTC],
                assetIdCollateral: constants_1.COLLATERAL_ASSET_ID_BY_NETWORK_ID[types_1.NetworkId.GOERLI],
                isBuyingSynthetic: false,
            });
        });
        it('throws if the order size is not a multiple of the Starkware quantum', () => {
            (0, expect_1.default)(() => {
                (0, assets_1.getStarkwareAmounts)({
                    market: types_1.DydxMarket.BTC_USD,
                    side: types_1.StarkwareOrderSide.SELL,
                    humanSize: '250.00000000001',
                    humanPrice: '1.23456789',
                }, types_1.NetworkId.GOERLI);
            }).toThrow('not a multiple of the quantum size');
        });
        it('throws if the quote amount is given and is not a multiple of the Starkware quantum', () => {
            (0, expect_1.default)(() => {
                (0, assets_1.getStarkwareAmounts)({
                    market: types_1.DydxMarket.BTC_USD,
                    side: types_1.StarkwareOrderSide.SELL,
                    humanSize: '250.0000000001',
                    humanQuoteAmount: '308.6419721',
                }, types_1.NetworkId.GOERLI);
            }).toThrow('not a multiple of the quantum size');
        });
    });
    describe('toQuantumsExact()', () => {
        it('converts a human readable amount to an integer number of quantums', () => {
            (0, expect_1.default)((0, assets_1.toQuantumsExact)('12.0000003', types_1.DydxAsset.LINK)).toBe('120000003');
        });
        it('throws if the amount does not divide evenly by the quantum size', () => {
            (0, expect_1.default)(() => {
                (0, assets_1.toQuantumsExact)('12.00000031', types_1.DydxAsset.LINK);
            }).toThrow('not a multiple of the quantum size');
        });
    });
    describe('toQuantumsRoundDown()', () => {
        it('converts a human readable amount to an integer number of quantums', () => {
            (0, expect_1.default)((0, assets_1.toQuantumsRoundDown)('12.0000003', types_1.DydxAsset.LINK)).toBe('120000003');
        });
        it('rounds down if the amount does not divide evenly by the quantum size', () => {
            (0, expect_1.default)((0, assets_1.toQuantumsRoundDown)('12.00000031', types_1.DydxAsset.LINK)).toBe('120000003');
        });
    });
    describe('toQuantumsRoundUp()', () => {
        it('converts a human readable amount to an integer number of quantums', () => {
            (0, expect_1.default)((0, assets_1.toQuantumsRoundUp)('12.0000003', types_1.DydxAsset.LINK)).toBe('120000003');
        });
        it('rounds up if the amount does not divide evenly by the quantum size', () => {
            (0, expect_1.default)((0, assets_1.toQuantumsRoundUp)('12.00000031', types_1.DydxAsset.LINK)).toBe('120000004');
        });
    });
    describe('getStarkwareLimitFeeAmount()', () => {
        it('converts the order limit fee as expected (edge case)', () => {
            (0, expect_1.default)((0, assets_1.getStarkwareLimitFeeAmount)('0.000001999999999999999999999999999999999999999999', '50750272151')).toBe('50751');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXRzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9fX3Rlc3RzX18vaGVscGVycy9hc3NldHMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7Ozs7O0FBRUgsb0RBQTRCO0FBRTVCLG1EQUc2QjtBQUM3QiwyQ0FLeUI7QUFFekIscUJBQXFCO0FBQ3JCLHFEQU9rQztBQUVsQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBRTlCLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFFOUIsRUFBRSxDQUFDLDBEQUEwRCxFQUFFLEdBQUcsRUFBRTtZQUNsRSxJQUFBLGdCQUFNLEVBQ0osSUFBQSxxQkFBWSxFQUFDLE1BQU0sRUFBRSxpQkFBUyxDQUFDLEdBQUcsQ0FBQyxDQUNwQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxHQUFHLEVBQUU7WUFDeEMsSUFBQSxnQkFBTSxFQUFDLEdBQUcsRUFBRTtnQkFDVixJQUFBLHFCQUFZLEVBQUMsTUFBTSxFQUFFLFNBQXNCLENBQUMsQ0FBQztZQUMvQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7UUFFckMsRUFBRSxDQUFDLGlEQUFpRCxFQUFFLEdBQUcsRUFBRTtZQUN6RCxJQUFBLGdCQUFNLEVBQ0osSUFBQSw0QkFBbUIsRUFBQztnQkFDbEIsTUFBTSxFQUFFLGtCQUFVLENBQUMsT0FBTztnQkFDMUIsSUFBSSxFQUFFLDBCQUFrQixDQUFDLElBQUk7Z0JBQzdCLFNBQVMsRUFBRSxnQkFBZ0I7Z0JBQzNCLFVBQVUsRUFBRSxZQUFZO2FBQ3pCLEVBQUUsaUJBQVMs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